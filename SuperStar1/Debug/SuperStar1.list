
SuperStar1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08001ce8  08001ce8  00011ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001dc4  08001dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001dc8  08001dc8  00011dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000008c  20000004  08001dd0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000090  08001dd0  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000072b8  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b3f  00000000  00000000  000272e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f02  00000000  00000000  00028e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000518  00000000  00000000  0002ad28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  0002b240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003205  00000000  00000000  0002b870  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001a0b  00000000  00000000  0002ea75  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00030480  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c30  00000000  00000000  000304fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001cd0 	.word	0x08001cd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001cd0 	.word	0x08001cd0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	46de      	mov	lr, fp
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	0244      	lsls	r4, r0, #9
 800022e:	0043      	lsls	r3, r0, #1
 8000230:	0fc6      	lsrs	r6, r0, #31
 8000232:	b083      	sub	sp, #12
 8000234:	1c0f      	adds	r7, r1, #0
 8000236:	0a64      	lsrs	r4, r4, #9
 8000238:	0e1b      	lsrs	r3, r3, #24
 800023a:	46b2      	mov	sl, r6
 800023c:	d053      	beq.n	80002e6 <__aeabi_fdiv+0xc6>
 800023e:	2bff      	cmp	r3, #255	; 0xff
 8000240:	d027      	beq.n	8000292 <__aeabi_fdiv+0x72>
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	00e4      	lsls	r4, r4, #3
 8000246:	04d2      	lsls	r2, r2, #19
 8000248:	4314      	orrs	r4, r2
 800024a:	227f      	movs	r2, #127	; 0x7f
 800024c:	4252      	negs	r2, r2
 800024e:	4690      	mov	r8, r2
 8000250:	4498      	add	r8, r3
 8000252:	2300      	movs	r3, #0
 8000254:	4699      	mov	r9, r3
 8000256:	469b      	mov	fp, r3
 8000258:	027d      	lsls	r5, r7, #9
 800025a:	0078      	lsls	r0, r7, #1
 800025c:	0ffb      	lsrs	r3, r7, #31
 800025e:	0a6d      	lsrs	r5, r5, #9
 8000260:	0e00      	lsrs	r0, r0, #24
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	d024      	beq.n	80002b0 <__aeabi_fdiv+0x90>
 8000266:	28ff      	cmp	r0, #255	; 0xff
 8000268:	d046      	beq.n	80002f8 <__aeabi_fdiv+0xd8>
 800026a:	2380      	movs	r3, #128	; 0x80
 800026c:	2100      	movs	r1, #0
 800026e:	00ed      	lsls	r5, r5, #3
 8000270:	04db      	lsls	r3, r3, #19
 8000272:	431d      	orrs	r5, r3
 8000274:	387f      	subs	r0, #127	; 0x7f
 8000276:	4647      	mov	r7, r8
 8000278:	1a38      	subs	r0, r7, r0
 800027a:	464f      	mov	r7, r9
 800027c:	430f      	orrs	r7, r1
 800027e:	00bf      	lsls	r7, r7, #2
 8000280:	46b9      	mov	r9, r7
 8000282:	0033      	movs	r3, r6
 8000284:	9a00      	ldr	r2, [sp, #0]
 8000286:	4f87      	ldr	r7, [pc, #540]	; (80004a4 <__aeabi_fdiv+0x284>)
 8000288:	4053      	eors	r3, r2
 800028a:	464a      	mov	r2, r9
 800028c:	58ba      	ldr	r2, [r7, r2]
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	4697      	mov	pc, r2
 8000292:	2c00      	cmp	r4, #0
 8000294:	d14e      	bne.n	8000334 <__aeabi_fdiv+0x114>
 8000296:	2308      	movs	r3, #8
 8000298:	4699      	mov	r9, r3
 800029a:	33f7      	adds	r3, #247	; 0xf7
 800029c:	4698      	mov	r8, r3
 800029e:	3bfd      	subs	r3, #253	; 0xfd
 80002a0:	469b      	mov	fp, r3
 80002a2:	027d      	lsls	r5, r7, #9
 80002a4:	0078      	lsls	r0, r7, #1
 80002a6:	0ffb      	lsrs	r3, r7, #31
 80002a8:	0a6d      	lsrs	r5, r5, #9
 80002aa:	0e00      	lsrs	r0, r0, #24
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	d1da      	bne.n	8000266 <__aeabi_fdiv+0x46>
 80002b0:	2d00      	cmp	r5, #0
 80002b2:	d126      	bne.n	8000302 <__aeabi_fdiv+0xe2>
 80002b4:	2000      	movs	r0, #0
 80002b6:	2101      	movs	r1, #1
 80002b8:	0033      	movs	r3, r6
 80002ba:	9a00      	ldr	r2, [sp, #0]
 80002bc:	4f7a      	ldr	r7, [pc, #488]	; (80004a8 <__aeabi_fdiv+0x288>)
 80002be:	4053      	eors	r3, r2
 80002c0:	4642      	mov	r2, r8
 80002c2:	1a10      	subs	r0, r2, r0
 80002c4:	464a      	mov	r2, r9
 80002c6:	430a      	orrs	r2, r1
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	58ba      	ldr	r2, [r7, r2]
 80002cc:	001d      	movs	r5, r3
 80002ce:	4697      	mov	pc, r2
 80002d0:	9b00      	ldr	r3, [sp, #0]
 80002d2:	002c      	movs	r4, r5
 80002d4:	469a      	mov	sl, r3
 80002d6:	468b      	mov	fp, r1
 80002d8:	465b      	mov	r3, fp
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d131      	bne.n	8000342 <__aeabi_fdiv+0x122>
 80002de:	4653      	mov	r3, sl
 80002e0:	21ff      	movs	r1, #255	; 0xff
 80002e2:	2400      	movs	r4, #0
 80002e4:	e038      	b.n	8000358 <__aeabi_fdiv+0x138>
 80002e6:	2c00      	cmp	r4, #0
 80002e8:	d117      	bne.n	800031a <__aeabi_fdiv+0xfa>
 80002ea:	2304      	movs	r3, #4
 80002ec:	4699      	mov	r9, r3
 80002ee:	2300      	movs	r3, #0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3301      	adds	r3, #1
 80002f4:	469b      	mov	fp, r3
 80002f6:	e7af      	b.n	8000258 <__aeabi_fdiv+0x38>
 80002f8:	20ff      	movs	r0, #255	; 0xff
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d10b      	bne.n	8000316 <__aeabi_fdiv+0xf6>
 80002fe:	2102      	movs	r1, #2
 8000300:	e7da      	b.n	80002b8 <__aeabi_fdiv+0x98>
 8000302:	0028      	movs	r0, r5
 8000304:	f000 fa44 	bl	8000790 <__clzsi2>
 8000308:	1f43      	subs	r3, r0, #5
 800030a:	409d      	lsls	r5, r3
 800030c:	2376      	movs	r3, #118	; 0x76
 800030e:	425b      	negs	r3, r3
 8000310:	1a18      	subs	r0, r3, r0
 8000312:	2100      	movs	r1, #0
 8000314:	e7af      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000316:	2103      	movs	r1, #3
 8000318:	e7ad      	b.n	8000276 <__aeabi_fdiv+0x56>
 800031a:	0020      	movs	r0, r4
 800031c:	f000 fa38 	bl	8000790 <__clzsi2>
 8000320:	1f43      	subs	r3, r0, #5
 8000322:	409c      	lsls	r4, r3
 8000324:	2376      	movs	r3, #118	; 0x76
 8000326:	425b      	negs	r3, r3
 8000328:	1a1b      	subs	r3, r3, r0
 800032a:	4698      	mov	r8, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4699      	mov	r9, r3
 8000330:	469b      	mov	fp, r3
 8000332:	e791      	b.n	8000258 <__aeabi_fdiv+0x38>
 8000334:	230c      	movs	r3, #12
 8000336:	4699      	mov	r9, r3
 8000338:	33f3      	adds	r3, #243	; 0xf3
 800033a:	4698      	mov	r8, r3
 800033c:	3bfc      	subs	r3, #252	; 0xfc
 800033e:	469b      	mov	fp, r3
 8000340:	e78a      	b.n	8000258 <__aeabi_fdiv+0x38>
 8000342:	2b03      	cmp	r3, #3
 8000344:	d100      	bne.n	8000348 <__aeabi_fdiv+0x128>
 8000346:	e0a5      	b.n	8000494 <__aeabi_fdiv+0x274>
 8000348:	4655      	mov	r5, sl
 800034a:	2b01      	cmp	r3, #1
 800034c:	d000      	beq.n	8000350 <__aeabi_fdiv+0x130>
 800034e:	e081      	b.n	8000454 <__aeabi_fdiv+0x234>
 8000350:	2301      	movs	r3, #1
 8000352:	2100      	movs	r1, #0
 8000354:	2400      	movs	r4, #0
 8000356:	402b      	ands	r3, r5
 8000358:	0264      	lsls	r4, r4, #9
 800035a:	05c9      	lsls	r1, r1, #23
 800035c:	0a60      	lsrs	r0, r4, #9
 800035e:	07db      	lsls	r3, r3, #31
 8000360:	4308      	orrs	r0, r1
 8000362:	4318      	orrs	r0, r3
 8000364:	b003      	add	sp, #12
 8000366:	bc3c      	pop	{r2, r3, r4, r5}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	46a2      	mov	sl, r4
 800036e:	46ab      	mov	fp, r5
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000372:	2480      	movs	r4, #128	; 0x80
 8000374:	2300      	movs	r3, #0
 8000376:	03e4      	lsls	r4, r4, #15
 8000378:	21ff      	movs	r1, #255	; 0xff
 800037a:	e7ed      	b.n	8000358 <__aeabi_fdiv+0x138>
 800037c:	21ff      	movs	r1, #255	; 0xff
 800037e:	2400      	movs	r4, #0
 8000380:	e7ea      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000382:	2301      	movs	r3, #1
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	291b      	cmp	r1, #27
 8000388:	dd66      	ble.n	8000458 <__aeabi_fdiv+0x238>
 800038a:	9a01      	ldr	r2, [sp, #4]
 800038c:	4013      	ands	r3, r2
 800038e:	2100      	movs	r1, #0
 8000390:	2400      	movs	r4, #0
 8000392:	e7e1      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	03db      	lsls	r3, r3, #15
 8000398:	421c      	tst	r4, r3
 800039a:	d038      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 800039c:	421d      	tst	r5, r3
 800039e:	d051      	beq.n	8000444 <__aeabi_fdiv+0x224>
 80003a0:	431c      	orrs	r4, r3
 80003a2:	0264      	lsls	r4, r4, #9
 80003a4:	0a64      	lsrs	r4, r4, #9
 80003a6:	0033      	movs	r3, r6
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	e7d5      	b.n	8000358 <__aeabi_fdiv+0x138>
 80003ac:	0163      	lsls	r3, r4, #5
 80003ae:	016c      	lsls	r4, r5, #5
 80003b0:	42a3      	cmp	r3, r4
 80003b2:	d23b      	bcs.n	800042c <__aeabi_fdiv+0x20c>
 80003b4:	261b      	movs	r6, #27
 80003b6:	2100      	movs	r1, #0
 80003b8:	3801      	subs	r0, #1
 80003ba:	2501      	movs	r5, #1
 80003bc:	001f      	movs	r7, r3
 80003be:	0049      	lsls	r1, r1, #1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	db01      	blt.n	80003ca <__aeabi_fdiv+0x1aa>
 80003c6:	429c      	cmp	r4, r3
 80003c8:	d801      	bhi.n	80003ce <__aeabi_fdiv+0x1ae>
 80003ca:	1b1b      	subs	r3, r3, r4
 80003cc:	4329      	orrs	r1, r5
 80003ce:	3e01      	subs	r6, #1
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f3      	bne.n	80003bc <__aeabi_fdiv+0x19c>
 80003d4:	001c      	movs	r4, r3
 80003d6:	1e63      	subs	r3, r4, #1
 80003d8:	419c      	sbcs	r4, r3
 80003da:	430c      	orrs	r4, r1
 80003dc:	0001      	movs	r1, r0
 80003de:	317f      	adds	r1, #127	; 0x7f
 80003e0:	2900      	cmp	r1, #0
 80003e2:	ddce      	ble.n	8000382 <__aeabi_fdiv+0x162>
 80003e4:	0763      	lsls	r3, r4, #29
 80003e6:	d004      	beq.n	80003f2 <__aeabi_fdiv+0x1d2>
 80003e8:	230f      	movs	r3, #15
 80003ea:	4023      	ands	r3, r4
 80003ec:	2b04      	cmp	r3, #4
 80003ee:	d000      	beq.n	80003f2 <__aeabi_fdiv+0x1d2>
 80003f0:	3404      	adds	r4, #4
 80003f2:	0123      	lsls	r3, r4, #4
 80003f4:	d503      	bpl.n	80003fe <__aeabi_fdiv+0x1de>
 80003f6:	0001      	movs	r1, r0
 80003f8:	4b2c      	ldr	r3, [pc, #176]	; (80004ac <__aeabi_fdiv+0x28c>)
 80003fa:	3180      	adds	r1, #128	; 0x80
 80003fc:	401c      	ands	r4, r3
 80003fe:	29fe      	cmp	r1, #254	; 0xfe
 8000400:	dd0d      	ble.n	800041e <__aeabi_fdiv+0x1fe>
 8000402:	2301      	movs	r3, #1
 8000404:	9a01      	ldr	r2, [sp, #4]
 8000406:	21ff      	movs	r1, #255	; 0xff
 8000408:	4013      	ands	r3, r2
 800040a:	2400      	movs	r4, #0
 800040c:	e7a4      	b.n	8000358 <__aeabi_fdiv+0x138>
 800040e:	2380      	movs	r3, #128	; 0x80
 8000410:	03db      	lsls	r3, r3, #15
 8000412:	431c      	orrs	r4, r3
 8000414:	0264      	lsls	r4, r4, #9
 8000416:	0a64      	lsrs	r4, r4, #9
 8000418:	0033      	movs	r3, r6
 800041a:	21ff      	movs	r1, #255	; 0xff
 800041c:	e79c      	b.n	8000358 <__aeabi_fdiv+0x138>
 800041e:	2301      	movs	r3, #1
 8000420:	9a01      	ldr	r2, [sp, #4]
 8000422:	01a4      	lsls	r4, r4, #6
 8000424:	0a64      	lsrs	r4, r4, #9
 8000426:	b2c9      	uxtb	r1, r1
 8000428:	4013      	ands	r3, r2
 800042a:	e795      	b.n	8000358 <__aeabi_fdiv+0x138>
 800042c:	1b1b      	subs	r3, r3, r4
 800042e:	261a      	movs	r6, #26
 8000430:	2101      	movs	r1, #1
 8000432:	e7c2      	b.n	80003ba <__aeabi_fdiv+0x19a>
 8000434:	9b00      	ldr	r3, [sp, #0]
 8000436:	468b      	mov	fp, r1
 8000438:	469a      	mov	sl, r3
 800043a:	2400      	movs	r4, #0
 800043c:	e74c      	b.n	80002d8 <__aeabi_fdiv+0xb8>
 800043e:	0263      	lsls	r3, r4, #9
 8000440:	d5e5      	bpl.n	800040e <__aeabi_fdiv+0x1ee>
 8000442:	2500      	movs	r5, #0
 8000444:	2480      	movs	r4, #128	; 0x80
 8000446:	03e4      	lsls	r4, r4, #15
 8000448:	432c      	orrs	r4, r5
 800044a:	0264      	lsls	r4, r4, #9
 800044c:	0a64      	lsrs	r4, r4, #9
 800044e:	9b00      	ldr	r3, [sp, #0]
 8000450:	21ff      	movs	r1, #255	; 0xff
 8000452:	e781      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000454:	9501      	str	r5, [sp, #4]
 8000456:	e7c1      	b.n	80003dc <__aeabi_fdiv+0x1bc>
 8000458:	0023      	movs	r3, r4
 800045a:	2020      	movs	r0, #32
 800045c:	40cb      	lsrs	r3, r1
 800045e:	1a41      	subs	r1, r0, r1
 8000460:	408c      	lsls	r4, r1
 8000462:	1e61      	subs	r1, r4, #1
 8000464:	418c      	sbcs	r4, r1
 8000466:	431c      	orrs	r4, r3
 8000468:	0763      	lsls	r3, r4, #29
 800046a:	d004      	beq.n	8000476 <__aeabi_fdiv+0x256>
 800046c:	230f      	movs	r3, #15
 800046e:	4023      	ands	r3, r4
 8000470:	2b04      	cmp	r3, #4
 8000472:	d000      	beq.n	8000476 <__aeabi_fdiv+0x256>
 8000474:	3404      	adds	r4, #4
 8000476:	0163      	lsls	r3, r4, #5
 8000478:	d505      	bpl.n	8000486 <__aeabi_fdiv+0x266>
 800047a:	2301      	movs	r3, #1
 800047c:	9a01      	ldr	r2, [sp, #4]
 800047e:	2101      	movs	r1, #1
 8000480:	4013      	ands	r3, r2
 8000482:	2400      	movs	r4, #0
 8000484:	e768      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000486:	2301      	movs	r3, #1
 8000488:	9a01      	ldr	r2, [sp, #4]
 800048a:	01a4      	lsls	r4, r4, #6
 800048c:	0a64      	lsrs	r4, r4, #9
 800048e:	4013      	ands	r3, r2
 8000490:	2100      	movs	r1, #0
 8000492:	e761      	b.n	8000358 <__aeabi_fdiv+0x138>
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	03db      	lsls	r3, r3, #15
 8000498:	431c      	orrs	r4, r3
 800049a:	0264      	lsls	r4, r4, #9
 800049c:	0a64      	lsrs	r4, r4, #9
 800049e:	4653      	mov	r3, sl
 80004a0:	21ff      	movs	r1, #255	; 0xff
 80004a2:	e759      	b.n	8000358 <__aeabi_fdiv+0x138>
 80004a4:	08001ce8 	.word	0x08001ce8
 80004a8:	08001d28 	.word	0x08001d28
 80004ac:	f7ffffff 	.word	0xf7ffffff

080004b0 <__aeabi_fmul>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	4657      	mov	r7, sl
 80004b4:	464e      	mov	r6, r9
 80004b6:	4645      	mov	r5, r8
 80004b8:	46de      	mov	lr, fp
 80004ba:	b5e0      	push	{r5, r6, r7, lr}
 80004bc:	0247      	lsls	r7, r0, #9
 80004be:	0046      	lsls	r6, r0, #1
 80004c0:	4688      	mov	r8, r1
 80004c2:	0a7f      	lsrs	r7, r7, #9
 80004c4:	0e36      	lsrs	r6, r6, #24
 80004c6:	0fc4      	lsrs	r4, r0, #31
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d047      	beq.n	800055c <__aeabi_fmul+0xac>
 80004cc:	2eff      	cmp	r6, #255	; 0xff
 80004ce:	d024      	beq.n	800051a <__aeabi_fmul+0x6a>
 80004d0:	00fb      	lsls	r3, r7, #3
 80004d2:	2780      	movs	r7, #128	; 0x80
 80004d4:	04ff      	lsls	r7, r7, #19
 80004d6:	431f      	orrs	r7, r3
 80004d8:	2300      	movs	r3, #0
 80004da:	4699      	mov	r9, r3
 80004dc:	469a      	mov	sl, r3
 80004de:	3e7f      	subs	r6, #127	; 0x7f
 80004e0:	4643      	mov	r3, r8
 80004e2:	025d      	lsls	r5, r3, #9
 80004e4:	0058      	lsls	r0, r3, #1
 80004e6:	0fdb      	lsrs	r3, r3, #31
 80004e8:	0a6d      	lsrs	r5, r5, #9
 80004ea:	0e00      	lsrs	r0, r0, #24
 80004ec:	4698      	mov	r8, r3
 80004ee:	d043      	beq.n	8000578 <__aeabi_fmul+0xc8>
 80004f0:	28ff      	cmp	r0, #255	; 0xff
 80004f2:	d03b      	beq.n	800056c <__aeabi_fmul+0xbc>
 80004f4:	00eb      	lsls	r3, r5, #3
 80004f6:	2580      	movs	r5, #128	; 0x80
 80004f8:	2200      	movs	r2, #0
 80004fa:	04ed      	lsls	r5, r5, #19
 80004fc:	431d      	orrs	r5, r3
 80004fe:	387f      	subs	r0, #127	; 0x7f
 8000500:	1836      	adds	r6, r6, r0
 8000502:	1c73      	adds	r3, r6, #1
 8000504:	4641      	mov	r1, r8
 8000506:	469b      	mov	fp, r3
 8000508:	464b      	mov	r3, r9
 800050a:	4061      	eors	r1, r4
 800050c:	4313      	orrs	r3, r2
 800050e:	2b0f      	cmp	r3, #15
 8000510:	d864      	bhi.n	80005dc <__aeabi_fmul+0x12c>
 8000512:	4875      	ldr	r0, [pc, #468]	; (80006e8 <__aeabi_fmul+0x238>)
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	58c3      	ldr	r3, [r0, r3]
 8000518:	469f      	mov	pc, r3
 800051a:	2f00      	cmp	r7, #0
 800051c:	d142      	bne.n	80005a4 <__aeabi_fmul+0xf4>
 800051e:	2308      	movs	r3, #8
 8000520:	4699      	mov	r9, r3
 8000522:	3b06      	subs	r3, #6
 8000524:	26ff      	movs	r6, #255	; 0xff
 8000526:	469a      	mov	sl, r3
 8000528:	e7da      	b.n	80004e0 <__aeabi_fmul+0x30>
 800052a:	4641      	mov	r1, r8
 800052c:	2a02      	cmp	r2, #2
 800052e:	d028      	beq.n	8000582 <__aeabi_fmul+0xd2>
 8000530:	2a03      	cmp	r2, #3
 8000532:	d100      	bne.n	8000536 <__aeabi_fmul+0x86>
 8000534:	e0ce      	b.n	80006d4 <__aeabi_fmul+0x224>
 8000536:	2a01      	cmp	r2, #1
 8000538:	d000      	beq.n	800053c <__aeabi_fmul+0x8c>
 800053a:	e0ac      	b.n	8000696 <__aeabi_fmul+0x1e6>
 800053c:	4011      	ands	r1, r2
 800053e:	2000      	movs	r0, #0
 8000540:	2200      	movs	r2, #0
 8000542:	b2cc      	uxtb	r4, r1
 8000544:	0240      	lsls	r0, r0, #9
 8000546:	05d2      	lsls	r2, r2, #23
 8000548:	0a40      	lsrs	r0, r0, #9
 800054a:	07e4      	lsls	r4, r4, #31
 800054c:	4310      	orrs	r0, r2
 800054e:	4320      	orrs	r0, r4
 8000550:	bc3c      	pop	{r2, r3, r4, r5}
 8000552:	4690      	mov	r8, r2
 8000554:	4699      	mov	r9, r3
 8000556:	46a2      	mov	sl, r4
 8000558:	46ab      	mov	fp, r5
 800055a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800055c:	2f00      	cmp	r7, #0
 800055e:	d115      	bne.n	800058c <__aeabi_fmul+0xdc>
 8000560:	2304      	movs	r3, #4
 8000562:	4699      	mov	r9, r3
 8000564:	3b03      	subs	r3, #3
 8000566:	2600      	movs	r6, #0
 8000568:	469a      	mov	sl, r3
 800056a:	e7b9      	b.n	80004e0 <__aeabi_fmul+0x30>
 800056c:	20ff      	movs	r0, #255	; 0xff
 800056e:	2202      	movs	r2, #2
 8000570:	2d00      	cmp	r5, #0
 8000572:	d0c5      	beq.n	8000500 <__aeabi_fmul+0x50>
 8000574:	2203      	movs	r2, #3
 8000576:	e7c3      	b.n	8000500 <__aeabi_fmul+0x50>
 8000578:	2d00      	cmp	r5, #0
 800057a:	d119      	bne.n	80005b0 <__aeabi_fmul+0x100>
 800057c:	2000      	movs	r0, #0
 800057e:	2201      	movs	r2, #1
 8000580:	e7be      	b.n	8000500 <__aeabi_fmul+0x50>
 8000582:	2401      	movs	r4, #1
 8000584:	22ff      	movs	r2, #255	; 0xff
 8000586:	400c      	ands	r4, r1
 8000588:	2000      	movs	r0, #0
 800058a:	e7db      	b.n	8000544 <__aeabi_fmul+0x94>
 800058c:	0038      	movs	r0, r7
 800058e:	f000 f8ff 	bl	8000790 <__clzsi2>
 8000592:	2676      	movs	r6, #118	; 0x76
 8000594:	1f43      	subs	r3, r0, #5
 8000596:	409f      	lsls	r7, r3
 8000598:	2300      	movs	r3, #0
 800059a:	4276      	negs	r6, r6
 800059c:	1a36      	subs	r6, r6, r0
 800059e:	4699      	mov	r9, r3
 80005a0:	469a      	mov	sl, r3
 80005a2:	e79d      	b.n	80004e0 <__aeabi_fmul+0x30>
 80005a4:	230c      	movs	r3, #12
 80005a6:	4699      	mov	r9, r3
 80005a8:	3b09      	subs	r3, #9
 80005aa:	26ff      	movs	r6, #255	; 0xff
 80005ac:	469a      	mov	sl, r3
 80005ae:	e797      	b.n	80004e0 <__aeabi_fmul+0x30>
 80005b0:	0028      	movs	r0, r5
 80005b2:	f000 f8ed 	bl	8000790 <__clzsi2>
 80005b6:	1f43      	subs	r3, r0, #5
 80005b8:	409d      	lsls	r5, r3
 80005ba:	2376      	movs	r3, #118	; 0x76
 80005bc:	425b      	negs	r3, r3
 80005be:	1a18      	subs	r0, r3, r0
 80005c0:	2200      	movs	r2, #0
 80005c2:	e79d      	b.n	8000500 <__aeabi_fmul+0x50>
 80005c4:	2080      	movs	r0, #128	; 0x80
 80005c6:	2400      	movs	r4, #0
 80005c8:	03c0      	lsls	r0, r0, #15
 80005ca:	22ff      	movs	r2, #255	; 0xff
 80005cc:	e7ba      	b.n	8000544 <__aeabi_fmul+0x94>
 80005ce:	003d      	movs	r5, r7
 80005d0:	4652      	mov	r2, sl
 80005d2:	e7ab      	b.n	800052c <__aeabi_fmul+0x7c>
 80005d4:	003d      	movs	r5, r7
 80005d6:	0021      	movs	r1, r4
 80005d8:	4652      	mov	r2, sl
 80005da:	e7a7      	b.n	800052c <__aeabi_fmul+0x7c>
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	469c      	mov	ip, r3
 80005e0:	042a      	lsls	r2, r5, #16
 80005e2:	0c12      	lsrs	r2, r2, #16
 80005e4:	0c2b      	lsrs	r3, r5, #16
 80005e6:	0014      	movs	r4, r2
 80005e8:	4660      	mov	r0, ip
 80005ea:	4665      	mov	r5, ip
 80005ec:	043f      	lsls	r7, r7, #16
 80005ee:	0c3f      	lsrs	r7, r7, #16
 80005f0:	437c      	muls	r4, r7
 80005f2:	4342      	muls	r2, r0
 80005f4:	435d      	muls	r5, r3
 80005f6:	437b      	muls	r3, r7
 80005f8:	0c27      	lsrs	r7, r4, #16
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	18ff      	adds	r7, r7, r3
 80005fe:	42ba      	cmp	r2, r7
 8000600:	d903      	bls.n	800060a <__aeabi_fmul+0x15a>
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	025b      	lsls	r3, r3, #9
 8000606:	469c      	mov	ip, r3
 8000608:	4465      	add	r5, ip
 800060a:	0424      	lsls	r4, r4, #16
 800060c:	043a      	lsls	r2, r7, #16
 800060e:	0c24      	lsrs	r4, r4, #16
 8000610:	1912      	adds	r2, r2, r4
 8000612:	0193      	lsls	r3, r2, #6
 8000614:	1e5c      	subs	r4, r3, #1
 8000616:	41a3      	sbcs	r3, r4
 8000618:	0c3f      	lsrs	r7, r7, #16
 800061a:	0e92      	lsrs	r2, r2, #26
 800061c:	197d      	adds	r5, r7, r5
 800061e:	431a      	orrs	r2, r3
 8000620:	01ad      	lsls	r5, r5, #6
 8000622:	4315      	orrs	r5, r2
 8000624:	012b      	lsls	r3, r5, #4
 8000626:	d504      	bpl.n	8000632 <__aeabi_fmul+0x182>
 8000628:	2301      	movs	r3, #1
 800062a:	465e      	mov	r6, fp
 800062c:	086a      	lsrs	r2, r5, #1
 800062e:	401d      	ands	r5, r3
 8000630:	4315      	orrs	r5, r2
 8000632:	0032      	movs	r2, r6
 8000634:	327f      	adds	r2, #127	; 0x7f
 8000636:	2a00      	cmp	r2, #0
 8000638:	dd25      	ble.n	8000686 <__aeabi_fmul+0x1d6>
 800063a:	076b      	lsls	r3, r5, #29
 800063c:	d004      	beq.n	8000648 <__aeabi_fmul+0x198>
 800063e:	230f      	movs	r3, #15
 8000640:	402b      	ands	r3, r5
 8000642:	2b04      	cmp	r3, #4
 8000644:	d000      	beq.n	8000648 <__aeabi_fmul+0x198>
 8000646:	3504      	adds	r5, #4
 8000648:	012b      	lsls	r3, r5, #4
 800064a:	d503      	bpl.n	8000654 <__aeabi_fmul+0x1a4>
 800064c:	0032      	movs	r2, r6
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <__aeabi_fmul+0x23c>)
 8000650:	3280      	adds	r2, #128	; 0x80
 8000652:	401d      	ands	r5, r3
 8000654:	2afe      	cmp	r2, #254	; 0xfe
 8000656:	dc94      	bgt.n	8000582 <__aeabi_fmul+0xd2>
 8000658:	2401      	movs	r4, #1
 800065a:	01a8      	lsls	r0, r5, #6
 800065c:	0a40      	lsrs	r0, r0, #9
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	400c      	ands	r4, r1
 8000662:	e76f      	b.n	8000544 <__aeabi_fmul+0x94>
 8000664:	2080      	movs	r0, #128	; 0x80
 8000666:	03c0      	lsls	r0, r0, #15
 8000668:	4207      	tst	r7, r0
 800066a:	d007      	beq.n	800067c <__aeabi_fmul+0x1cc>
 800066c:	4205      	tst	r5, r0
 800066e:	d105      	bne.n	800067c <__aeabi_fmul+0x1cc>
 8000670:	4328      	orrs	r0, r5
 8000672:	0240      	lsls	r0, r0, #9
 8000674:	0a40      	lsrs	r0, r0, #9
 8000676:	4644      	mov	r4, r8
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	e763      	b.n	8000544 <__aeabi_fmul+0x94>
 800067c:	4338      	orrs	r0, r7
 800067e:	0240      	lsls	r0, r0, #9
 8000680:	0a40      	lsrs	r0, r0, #9
 8000682:	22ff      	movs	r2, #255	; 0xff
 8000684:	e75e      	b.n	8000544 <__aeabi_fmul+0x94>
 8000686:	2401      	movs	r4, #1
 8000688:	1aa3      	subs	r3, r4, r2
 800068a:	2b1b      	cmp	r3, #27
 800068c:	dd05      	ble.n	800069a <__aeabi_fmul+0x1ea>
 800068e:	400c      	ands	r4, r1
 8000690:	2200      	movs	r2, #0
 8000692:	2000      	movs	r0, #0
 8000694:	e756      	b.n	8000544 <__aeabi_fmul+0x94>
 8000696:	465e      	mov	r6, fp
 8000698:	e7cb      	b.n	8000632 <__aeabi_fmul+0x182>
 800069a:	002a      	movs	r2, r5
 800069c:	2020      	movs	r0, #32
 800069e:	40da      	lsrs	r2, r3
 80006a0:	1ac3      	subs	r3, r0, r3
 80006a2:	409d      	lsls	r5, r3
 80006a4:	002b      	movs	r3, r5
 80006a6:	1e5d      	subs	r5, r3, #1
 80006a8:	41ab      	sbcs	r3, r5
 80006aa:	4313      	orrs	r3, r2
 80006ac:	075a      	lsls	r2, r3, #29
 80006ae:	d004      	beq.n	80006ba <__aeabi_fmul+0x20a>
 80006b0:	220f      	movs	r2, #15
 80006b2:	401a      	ands	r2, r3
 80006b4:	2a04      	cmp	r2, #4
 80006b6:	d000      	beq.n	80006ba <__aeabi_fmul+0x20a>
 80006b8:	3304      	adds	r3, #4
 80006ba:	015a      	lsls	r2, r3, #5
 80006bc:	d504      	bpl.n	80006c8 <__aeabi_fmul+0x218>
 80006be:	2401      	movs	r4, #1
 80006c0:	2201      	movs	r2, #1
 80006c2:	400c      	ands	r4, r1
 80006c4:	2000      	movs	r0, #0
 80006c6:	e73d      	b.n	8000544 <__aeabi_fmul+0x94>
 80006c8:	2401      	movs	r4, #1
 80006ca:	019b      	lsls	r3, r3, #6
 80006cc:	0a58      	lsrs	r0, r3, #9
 80006ce:	400c      	ands	r4, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	e737      	b.n	8000544 <__aeabi_fmul+0x94>
 80006d4:	2080      	movs	r0, #128	; 0x80
 80006d6:	2401      	movs	r4, #1
 80006d8:	03c0      	lsls	r0, r0, #15
 80006da:	4328      	orrs	r0, r5
 80006dc:	0240      	lsls	r0, r0, #9
 80006de:	0a40      	lsrs	r0, r0, #9
 80006e0:	400c      	ands	r4, r1
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	e72e      	b.n	8000544 <__aeabi_fmul+0x94>
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	08001d68 	.word	0x08001d68
 80006ec:	f7ffffff 	.word	0xf7ffffff

080006f0 <__aeabi_i2f>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d030      	beq.n	8000758 <__aeabi_i2f+0x68>
 80006f6:	17c3      	asrs	r3, r0, #31
 80006f8:	18c4      	adds	r4, r0, r3
 80006fa:	405c      	eors	r4, r3
 80006fc:	0fc5      	lsrs	r5, r0, #31
 80006fe:	0020      	movs	r0, r4
 8000700:	f000 f846 	bl	8000790 <__clzsi2>
 8000704:	239e      	movs	r3, #158	; 0x9e
 8000706:	1a1b      	subs	r3, r3, r0
 8000708:	2b96      	cmp	r3, #150	; 0x96
 800070a:	dc0d      	bgt.n	8000728 <__aeabi_i2f+0x38>
 800070c:	2296      	movs	r2, #150	; 0x96
 800070e:	1ad2      	subs	r2, r2, r3
 8000710:	4094      	lsls	r4, r2
 8000712:	002a      	movs	r2, r5
 8000714:	0264      	lsls	r4, r4, #9
 8000716:	0a64      	lsrs	r4, r4, #9
 8000718:	b2db      	uxtb	r3, r3
 800071a:	0264      	lsls	r4, r4, #9
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	0a60      	lsrs	r0, r4, #9
 8000720:	07d2      	lsls	r2, r2, #31
 8000722:	4318      	orrs	r0, r3
 8000724:	4310      	orrs	r0, r2
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	2b99      	cmp	r3, #153	; 0x99
 800072a:	dc19      	bgt.n	8000760 <__aeabi_i2f+0x70>
 800072c:	2299      	movs	r2, #153	; 0x99
 800072e:	1ad2      	subs	r2, r2, r3
 8000730:	2a00      	cmp	r2, #0
 8000732:	dd29      	ble.n	8000788 <__aeabi_i2f+0x98>
 8000734:	4094      	lsls	r4, r2
 8000736:	0022      	movs	r2, r4
 8000738:	4c14      	ldr	r4, [pc, #80]	; (800078c <__aeabi_i2f+0x9c>)
 800073a:	4014      	ands	r4, r2
 800073c:	0751      	lsls	r1, r2, #29
 800073e:	d004      	beq.n	800074a <__aeabi_i2f+0x5a>
 8000740:	210f      	movs	r1, #15
 8000742:	400a      	ands	r2, r1
 8000744:	2a04      	cmp	r2, #4
 8000746:	d000      	beq.n	800074a <__aeabi_i2f+0x5a>
 8000748:	3404      	adds	r4, #4
 800074a:	0162      	lsls	r2, r4, #5
 800074c:	d413      	bmi.n	8000776 <__aeabi_i2f+0x86>
 800074e:	01a4      	lsls	r4, r4, #6
 8000750:	0a64      	lsrs	r4, r4, #9
 8000752:	b2db      	uxtb	r3, r3
 8000754:	002a      	movs	r2, r5
 8000756:	e7e0      	b.n	800071a <__aeabi_i2f+0x2a>
 8000758:	2200      	movs	r2, #0
 800075a:	2300      	movs	r3, #0
 800075c:	2400      	movs	r4, #0
 800075e:	e7dc      	b.n	800071a <__aeabi_i2f+0x2a>
 8000760:	2205      	movs	r2, #5
 8000762:	0021      	movs	r1, r4
 8000764:	1a12      	subs	r2, r2, r0
 8000766:	40d1      	lsrs	r1, r2
 8000768:	22b9      	movs	r2, #185	; 0xb9
 800076a:	1ad2      	subs	r2, r2, r3
 800076c:	4094      	lsls	r4, r2
 800076e:	1e62      	subs	r2, r4, #1
 8000770:	4194      	sbcs	r4, r2
 8000772:	430c      	orrs	r4, r1
 8000774:	e7da      	b.n	800072c <__aeabi_i2f+0x3c>
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <__aeabi_i2f+0x9c>)
 8000778:	002a      	movs	r2, r5
 800077a:	401c      	ands	r4, r3
 800077c:	239f      	movs	r3, #159	; 0x9f
 800077e:	01a4      	lsls	r4, r4, #6
 8000780:	1a1b      	subs	r3, r3, r0
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	b2db      	uxtb	r3, r3
 8000786:	e7c8      	b.n	800071a <__aeabi_i2f+0x2a>
 8000788:	0022      	movs	r2, r4
 800078a:	e7d5      	b.n	8000738 <__aeabi_i2f+0x48>
 800078c:	fbffffff 	.word	0xfbffffff

08000790 <__clzsi2>:
 8000790:	211c      	movs	r1, #28
 8000792:	2301      	movs	r3, #1
 8000794:	041b      	lsls	r3, r3, #16
 8000796:	4298      	cmp	r0, r3
 8000798:	d301      	bcc.n	800079e <__clzsi2+0xe>
 800079a:	0c00      	lsrs	r0, r0, #16
 800079c:	3910      	subs	r1, #16
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	4298      	cmp	r0, r3
 80007a2:	d301      	bcc.n	80007a8 <__clzsi2+0x18>
 80007a4:	0a00      	lsrs	r0, r0, #8
 80007a6:	3908      	subs	r1, #8
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d301      	bcc.n	80007b2 <__clzsi2+0x22>
 80007ae:	0900      	lsrs	r0, r0, #4
 80007b0:	3904      	subs	r1, #4
 80007b2:	a202      	add	r2, pc, #8	; (adr r2, 80007bc <__clzsi2+0x2c>)
 80007b4:	5c10      	ldrb	r0, [r2, r0]
 80007b6:	1840      	adds	r0, r0, r1
 80007b8:	4770      	bx	lr
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	02020304 	.word	0x02020304
 80007c0:	01010101 	.word	0x01010101
	...

080007cc <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80007cc:	21fa      	movs	r1, #250	; 0xfa
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_InitTick+0x2c>)
{
 80007d0:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80007d2:	0089      	lsls	r1, r1, #2
{
 80007d4:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	f7ff fc96 	bl	8000108 <__udivsi3>
 80007dc:	f000 fb1a 	bl	8000e14 <HAL_SYSTICK_Config>
 80007e0:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 80007e2:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80007e4:	2c00      	cmp	r4, #0
 80007e6:	d105      	bne.n	80007f4 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80007e8:	3802      	subs	r0, #2
 80007ea:	0022      	movs	r2, r4
 80007ec:	0029      	movs	r1, r5
 80007ee:	f000 fae1 	bl	8000db4 <HAL_NVIC_SetPriority>
 80007f2:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000000 	.word	0x20000000

080007fc <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_Init+0x24>)
{
 8000800:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000802:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000804:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000806:	430b      	orrs	r3, r1
 8000808:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800080a:	f7ff ffdf 	bl	80007cc <HAL_InitTick>
 800080e:	1e04      	subs	r4, r0, #0
 8000810:	d103      	bne.n	800081a <HAL_Init+0x1e>
    HAL_MspInit();
 8000812:	f001 f845 	bl	80018a0 <HAL_MspInit>
}
 8000816:	0020      	movs	r0, r4
 8000818:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800081a:	2401      	movs	r4, #1
 800081c:	e7fb      	b.n	8000816 <HAL_Init+0x1a>
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000824:	4a02      	ldr	r2, [pc, #8]	; (8000830 <HAL_IncTick+0xc>)
 8000826:	6813      	ldr	r3, [r2, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	4770      	bx	lr
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000020 	.word	0x20000020

08000834 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <HAL_GetTick+0x8>)
 8000836:	6818      	ldr	r0, [r3, #0]
}
 8000838:	4770      	bx	lr
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	20000020 	.word	0x20000020

08000840 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000840:	2103      	movs	r1, #3
 8000842:	6803      	ldr	r3, [r0, #0]
{
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000848:	6898      	ldr	r0, [r3, #8]
 800084a:	4008      	ands	r0, r1
 800084c:	2801      	cmp	r0, #1
 800084e:	d001      	beq.n	8000854 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000850:	2000      	movs	r0, #0
}
 8000852:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4202      	tst	r2, r0
 8000858:	d0fa      	beq.n	8000850 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800085a:	2205      	movs	r2, #5
 800085c:	689d      	ldr	r5, [r3, #8]
 800085e:	4015      	ands	r5, r2
 8000860:	2d01      	cmp	r5, #1
 8000862:	d119      	bne.n	8000898 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8000864:	2202      	movs	r2, #2
 8000866:	6898      	ldr	r0, [r3, #8]
 8000868:	4302      	orrs	r2, r0
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800086e:	f7ff ffe1 	bl	8000834 <HAL_GetTick>
 8000872:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	422b      	tst	r3, r5
 800087a:	d0e9      	beq.n	8000850 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800087c:	f7ff ffda 	bl	8000834 <HAL_GetTick>
 8000880:	1b80      	subs	r0, r0, r6
 8000882:	280a      	cmp	r0, #10
 8000884:	d9f6      	bls.n	8000874 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000886:	2310      	movs	r3, #16
 8000888:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800088c:	4313      	orrs	r3, r2
 800088e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000892:	431d      	orrs	r5, r3
 8000894:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000896:	e7dc      	b.n	8000852 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000898:	2310      	movs	r3, #16
 800089a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800089c:	4313      	orrs	r3, r2
 800089e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008a2:	4303      	orrs	r3, r0
 80008a4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80008a6:	e7d4      	b.n	8000852 <ADC_Disable+0x12>

080008a8 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80008a8:	2204      	movs	r2, #4
 80008aa:	6803      	ldr	r3, [r0, #0]
{
 80008ac:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80008ae:	6899      	ldr	r1, [r3, #8]
{
 80008b0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80008b2:	4211      	tst	r1, r2
 80008b4:	d101      	bne.n	80008ba <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80008b6:	2000      	movs	r0, #0
}
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80008ba:	6899      	ldr	r1, [r3, #8]
 80008bc:	4211      	tst	r1, r2
 80008be:	d006      	beq.n	80008ce <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80008c0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80008c2:	0792      	lsls	r2, r2, #30
 80008c4:	d403      	bmi.n	80008ce <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80008c6:	2210      	movs	r2, #16
 80008c8:	6899      	ldr	r1, [r3, #8]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80008ce:	f7ff ffb1 	bl	8000834 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80008d2:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80008d4:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80008d6:	6823      	ldr	r3, [r4, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	422b      	tst	r3, r5
 80008dc:	d0eb      	beq.n	80008b6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80008de:	f7ff ffa9 	bl	8000834 <HAL_GetTick>
 80008e2:	1b80      	subs	r0, r0, r6
 80008e4:	280a      	cmp	r0, #10
 80008e6:	d9f6      	bls.n	80008d6 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008e8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80008ee:	4313      	orrs	r3, r2
 80008f0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008f4:	4303      	orrs	r3, r0
 80008f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80008f8:	e7de      	b.n	80008b8 <ADC_ConversionStop+0x10>
	...

080008fc <ADC_Enable>:
{
 80008fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008fe:	2103      	movs	r1, #3
 8000900:	6803      	ldr	r3, [r0, #0]
{
 8000902:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	400a      	ands	r2, r1
 8000908:	2a01      	cmp	r2, #1
 800090a:	d111      	bne.n	8000930 <ADC_Enable+0x34>
 800090c:	6819      	ldr	r1, [r3, #0]
 800090e:	4211      	tst	r1, r2
 8000910:	d00e      	beq.n	8000930 <ADC_Enable+0x34>
  return HAL_OK;
 8000912:	2000      	movs	r0, #0
}
 8000914:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000916:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000918:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800091a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800091c:	4313      	orrs	r3, r2
 800091e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000920:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000922:	4303      	orrs	r3, r0
 8000924:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000926:	e7f5      	b.n	8000914 <ADC_Enable+0x18>
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));

  while(waitLoopIndex != 0U)
  {
    waitLoopIndex--;
 8000928:	9b01      	ldr	r3, [sp, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	e00d      	b.n	800094c <ADC_Enable+0x50>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000930:	6899      	ldr	r1, [r3, #8]
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <ADC_Enable+0x84>)
 8000934:	4211      	tst	r1, r2
 8000936:	d1ee      	bne.n	8000916 <ADC_Enable+0x1a>
    __HAL_ADC_ENABLE(hadc);
 8000938:	2201      	movs	r2, #1
 800093a:	6899      	ldr	r1, [r3, #8]
 800093c:	430a      	orrs	r2, r1
 800093e:	609a      	str	r2, [r3, #8]
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <ADC_Enable+0x88>)
 8000942:	4911      	ldr	r1, [pc, #68]	; (8000988 <ADC_Enable+0x8c>)
 8000944:	6818      	ldr	r0, [r3, #0]
 8000946:	f7ff fbdf 	bl	8000108 <__udivsi3>
 800094a:	9001      	str	r0, [sp, #4]
  while(waitLoopIndex != 0U)
 800094c:	9b01      	ldr	r3, [sp, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1ea      	bne.n	8000928 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8000952:	f7ff ff6f 	bl	8000834 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000956:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000958:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	422b      	tst	r3, r5
 8000960:	d1d7      	bne.n	8000912 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000962:	f7ff ff67 	bl	8000834 <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	280a      	cmp	r0, #10
 800096a:	d9f6      	bls.n	800095a <ADC_Enable+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800096c:	2310      	movs	r3, #16
 800096e:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000970:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000972:	4313      	orrs	r3, r2
 8000974:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000978:	432b      	orrs	r3, r5
 800097a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800097c:	e7ca      	b.n	8000914 <ADC_Enable+0x18>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	80000017 	.word	0x80000017
 8000984:	20000000 	.word	0x20000000
 8000988:	000f4240 	.word	0x000f4240

0800098c <HAL_ADC_Init>:
{
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000990:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000992:	2c00      	cmp	r4, #0
 8000994:	d019      	beq.n	80009ca <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000996:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000998:	2b00      	cmp	r3, #0
 800099a:	d106      	bne.n	80009aa <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800099c:	0022      	movs	r2, r4
 800099e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80009a0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80009a2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80009a4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80009a6:	f000 fe8b 	bl	80016c0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80009aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80009ac:	06db      	lsls	r3, r3, #27
 80009ae:	d404      	bmi.n	80009ba <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80009b0:	2204      	movs	r2, #4
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	6898      	ldr	r0, [r3, #8]
 80009b6:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80009b8:	d008      	beq.n	80009cc <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ba:	2310      	movs	r3, #16
 80009bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80009be:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c0:	4313      	orrs	r3, r2
 80009c2:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80009c4:	2300      	movs	r3, #0
 80009c6:	3450      	adds	r4, #80	; 0x50
 80009c8:	7023      	strb	r3, [r4, #0]
}
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80009cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80009ce:	4955      	ldr	r1, [pc, #340]	; (8000b24 <HAL_ADC_Init+0x198>)
 80009d0:	4011      	ands	r1, r2
 80009d2:	2202      	movs	r2, #2
 80009d4:	430a      	orrs	r2, r1
 80009d6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009d8:	2203      	movs	r2, #3
 80009da:	6899      	ldr	r1, [r3, #8]
 80009dc:	4011      	ands	r1, r2
 80009de:	4a52      	ldr	r2, [pc, #328]	; (8000b28 <HAL_ADC_Init+0x19c>)
 80009e0:	2901      	cmp	r1, #1
 80009e2:	d102      	bne.n	80009ea <HAL_ADC_Init+0x5e>
 80009e4:	681d      	ldr	r5, [r3, #0]
 80009e6:	420d      	tst	r5, r1
 80009e8:	d119      	bne.n	8000a1e <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80009ea:	2680      	movs	r6, #128	; 0x80
 80009ec:	6865      	ldr	r5, [r4, #4]
 80009ee:	05f6      	lsls	r6, r6, #23
 80009f0:	0069      	lsls	r1, r5, #1
 80009f2:	0849      	lsrs	r1, r1, #1
 80009f4:	42b1      	cmp	r1, r6
 80009f6:	d003      	beq.n	8000a00 <HAL_ADC_Init+0x74>
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0609      	lsls	r1, r1, #24
 80009fc:	428d      	cmp	r5, r1
 80009fe:	d176      	bne.n	8000aee <HAL_ADC_Init+0x162>
 8000a00:	6919      	ldr	r1, [r3, #16]
 8000a02:	0089      	lsls	r1, r1, #2
 8000a04:	0889      	lsrs	r1, r1, #2
 8000a06:	6119      	str	r1, [r3, #16]
 8000a08:	6919      	ldr	r1, [r3, #16]
 8000a0a:	430d      	orrs	r5, r1
 8000a0c:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000a0e:	2518      	movs	r5, #24
 8000a10:	68d9      	ldr	r1, [r3, #12]
 8000a12:	43a9      	bics	r1, r5
 8000a14:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000a16:	68d9      	ldr	r1, [r3, #12]
 8000a18:	68a5      	ldr	r5, [r4, #8]
 8000a1a:	4329      	orrs	r1, r5
 8000a1c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000a1e:	6811      	ldr	r1, [r2, #0]
 8000a20:	4d42      	ldr	r5, [pc, #264]	; (8000b2c <HAL_ADC_Init+0x1a0>)
 8000a22:	4029      	ands	r1, r5
 8000a24:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a28:	6815      	ldr	r5, [r2, #0]
 8000a2a:	0649      	lsls	r1, r1, #25
 8000a2c:	4329      	orrs	r1, r5
 8000a2e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	6899      	ldr	r1, [r3, #8]
 8000a34:	0552      	lsls	r2, r2, #21
 8000a36:	4211      	tst	r1, r2
 8000a38:	d102      	bne.n	8000a40 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000a3a:	6899      	ldr	r1, [r3, #8]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	493b      	ldr	r1, [pc, #236]	; (8000b30 <HAL_ADC_Init+0x1a4>)
 8000a44:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000a46:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000a48:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a4a:	68dd      	ldr	r5, [r3, #12]
 8000a4c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000a4e:	2902      	cmp	r1, #2
 8000a50:	d100      	bne.n	8000a54 <HAL_ADC_Init+0xc8>
 8000a52:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a54:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a56:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a58:	4332      	orrs	r2, r6
 8000a5a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000a5c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a5e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000a60:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a62:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000a64:	69e5      	ldr	r5, [r4, #28]
 8000a66:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a68:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a6a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a6c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000a6e:	0025      	movs	r5, r4
 8000a70:	352c      	adds	r5, #44	; 0x2c
 8000a72:	782d      	ldrb	r5, [r5, #0]
 8000a74:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a76:	432a      	orrs	r2, r5
 8000a78:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a7a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000a7c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a80:	30ff      	adds	r0, #255	; 0xff
 8000a82:	4282      	cmp	r2, r0
 8000a84:	d004      	beq.n	8000a90 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000a86:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000a88:	68d8      	ldr	r0, [r3, #12]
 8000a8a:	432a      	orrs	r2, r5
 8000a8c:	4302      	orrs	r2, r0
 8000a8e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a90:	1ca2      	adds	r2, r4, #2
 8000a92:	7fd2      	ldrb	r2, [r2, #31]
 8000a94:	2a01      	cmp	r2, #1
 8000a96:	d106      	bne.n	8000aa6 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	d134      	bne.n	8000b06 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	68d9      	ldr	r1, [r3, #12]
 8000aa0:	0252      	lsls	r2, r2, #9
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000aa6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000aa8:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8000aaa:	2901      	cmp	r1, #1
 8000aac:	d133      	bne.n	8000b16 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000aae:	4821      	ldr	r0, [pc, #132]	; (8000b34 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ab0:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000ab2:	4002      	ands	r2, r0
 8000ab4:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ab6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ab8:	6918      	ldr	r0, [r3, #16]
 8000aba:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000abc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000abe:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000ac0:	4302      	orrs	r2, r0
 8000ac2:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	4311      	orrs	r1, r2
 8000ac8:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000aca:	2107      	movs	r1, #7
 8000acc:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000ace:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000ad0:	438a      	bics	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8000adc:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000ade:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000ae0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ae2:	4393      	bics	r3, r2
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000aec:	e76d      	b.n	80009ca <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000aee:	6919      	ldr	r1, [r3, #16]
 8000af0:	4e11      	ldr	r6, [pc, #68]	; (8000b38 <HAL_ADC_Init+0x1ac>)
 8000af2:	0089      	lsls	r1, r1, #2
 8000af4:	0889      	lsrs	r1, r1, #2
 8000af6:	6119      	str	r1, [r3, #16]
 8000af8:	6811      	ldr	r1, [r2, #0]
 8000afa:	4031      	ands	r1, r6
 8000afc:	6011      	str	r1, [r2, #0]
 8000afe:	6811      	ldr	r1, [r2, #0]
 8000b00:	430d      	orrs	r5, r1
 8000b02:	6015      	str	r5, [r2, #0]
 8000b04:	e783      	b.n	8000a0e <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b06:	2120      	movs	r1, #32
 8000b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b0a:	4301      	orrs	r1, r0
 8000b0c:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000b10:	430a      	orrs	r2, r1
 8000b12:	65a2      	str	r2, [r4, #88]	; 0x58
 8000b14:	e7c7      	b.n	8000aa6 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000b16:	2101      	movs	r1, #1
 8000b18:	420a      	tst	r2, r1
 8000b1a:	d0d6      	beq.n	8000aca <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	438a      	bics	r2, r1
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	e7d2      	b.n	8000aca <HAL_ADC_Init+0x13e>
 8000b24:	fffffefd 	.word	0xfffffefd
 8000b28:	40012708 	.word	0x40012708
 8000b2c:	fdffffff 	.word	0xfdffffff
 8000b30:	fffe0219 	.word	0xfffe0219
 8000b34:	fffffc03 	.word	0xfffffc03
 8000b38:	ffc3ffff 	.word	0xffc3ffff

08000b3c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b3c:	6803      	ldr	r3, [r0, #0]
{
 8000b3e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b40:	689b      	ldr	r3, [r3, #8]
{
 8000b42:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000b44:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b46:	075b      	lsls	r3, r3, #29
 8000b48:	d41a      	bmi.n	8000b80 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8000b4a:	0025      	movs	r5, r4
 8000b4c:	3550      	adds	r5, #80	; 0x50
 8000b4e:	782b      	ldrb	r3, [r5, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d015      	beq.n	8000b80 <HAL_ADC_Start+0x44>
 8000b54:	2301      	movs	r3, #1
 8000b56:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000b58:	69e3      	ldr	r3, [r4, #28]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d111      	bne.n	8000b82 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000b5e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8000b62:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000b64:	401a      	ands	r2, r3
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b6c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8000b6e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b70:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8000b72:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8000b74:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000b76:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000b78:	6899      	ldr	r1, [r3, #8]
 8000b7a:	3a18      	subs	r2, #24
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	609a      	str	r2, [r3, #8]
}
 8000b80:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000b82:	0020      	movs	r0, r4
 8000b84:	f7ff feba 	bl	80008fc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d1f9      	bne.n	8000b80 <HAL_ADC_Start+0x44>
 8000b8c:	e7e7      	b.n	8000b5e <HAL_ADC_Start+0x22>
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	fffff0fe 	.word	0xfffff0fe

08000b94 <HAL_ADC_Stop>:
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000b96:	0006      	movs	r6, r0
 8000b98:	3650      	adds	r6, #80	; 0x50
 8000b9a:	7833      	ldrb	r3, [r6, #0]
{
 8000b9c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d012      	beq.n	8000bca <HAL_ADC_Stop+0x36>
 8000ba4:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000ba6:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8000ba8:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000baa:	f7ff fe7d 	bl	80008a8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d109      	bne.n	8000bc6 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8000bb2:	0020      	movs	r0, r4
 8000bb4:	f7ff fe44 	bl	8000840 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d104      	bne.n	8000bc6 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8000bbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bbe:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <HAL_ADC_Stop+0x38>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	431d      	orrs	r5, r3
 8000bc4:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	7033      	strb	r3, [r6, #0]
}
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	fffffefe 	.word	0xfffffefe

08000bd0 <HAL_ADC_PollForConversion>:
{
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000bd2:	6945      	ldr	r5, [r0, #20]
{
 8000bd4:	0004      	movs	r4, r0
 8000bd6:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000bd8:	2d08      	cmp	r5, #8
 8000bda:	d00d      	beq.n	8000bf8 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000bdc:	6803      	ldr	r3, [r0, #0]
 8000bde:	2001      	movs	r0, #1
 8000be0:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000be2:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000be4:	4203      	tst	r3, r0
 8000be6:	d007      	beq.n	8000bf8 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000be8:	2320      	movs	r3, #32
 8000bea:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8000bec:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	7023      	strb	r3, [r4, #0]
}
 8000bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8000bf8:	f7ff fe1c 	bl	8000834 <HAL_GetTick>
 8000bfc:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	422a      	tst	r2, r5
 8000c04:	d024      	beq.n	8000c50 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c06:	2280      	movs	r2, #128	; 0x80
 8000c08:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c10:	22c0      	movs	r2, #192	; 0xc0
 8000c12:	68d9      	ldr	r1, [r3, #12]
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	4211      	tst	r1, r2
 8000c18:	d113      	bne.n	8000c42 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c1a:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c1c:	7fd2      	ldrb	r2, [r2, #31]
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d10f      	bne.n	8000c42 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	0712      	lsls	r2, r2, #28
 8000c26:	d50c      	bpl.n	8000c42 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	0752      	lsls	r2, r2, #29
 8000c2c:	d423      	bmi.n	8000c76 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	438a      	bics	r2, r1
 8000c34:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000c36:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c38:	4913      	ldr	r1, [pc, #76]	; (8000c88 <HAL_ADC_PollForConversion+0xb8>)
 8000c3a:	4011      	ands	r1, r2
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8000c42:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000c44:	69a2      	ldr	r2, [r4, #24]
 8000c46:	4282      	cmp	r2, r0
 8000c48:	d1d5      	bne.n	8000bf6 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	e7d2      	b.n	8000bf6 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8000c50:	1c72      	adds	r2, r6, #1
 8000c52:	d0d5      	beq.n	8000c00 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d108      	bne.n	8000c6a <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c58:	2304      	movs	r3, #4
 8000c5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8000c5c:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8000c62:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000c64:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8000c66:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8000c68:	e7c5      	b.n	8000bf6 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c6a:	f7ff fde3 	bl	8000834 <HAL_GetTick>
 8000c6e:	1bc0      	subs	r0, r0, r7
 8000c70:	4286      	cmp	r6, r0
 8000c72:	d2c4      	bcs.n	8000bfe <HAL_ADC_PollForConversion+0x2e>
 8000c74:	e7f0      	b.n	8000c58 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c76:	2220      	movs	r2, #32
 8000c78:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000c82:	430a      	orrs	r2, r1
 8000c84:	65a2      	str	r2, [r4, #88]	; 0x58
 8000c86:	e7dc      	b.n	8000c42 <HAL_ADC_PollForConversion+0x72>
 8000c88:	fffffefe 	.word	0xfffffefe

08000c8c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000c8c:	6803      	ldr	r3, [r0, #0]
 8000c8e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_ADC_ConfigChannel>:
{
 8000c94:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8000c96:	0004      	movs	r4, r0
 8000c98:	3450      	adds	r4, #80	; 0x50
 8000c9a:	7823      	ldrb	r3, [r4, #0]
{
 8000c9c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d00c      	beq.n	8000cbe <HAL_ADC_ConfigChannel+0x2a>
 8000ca4:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000ca6:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 8000ca8:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000caa:	6890      	ldr	r0, [r2, #8]
 8000cac:	0740      	lsls	r0, r0, #29
 8000cae:	d507      	bpl.n	8000cc0 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	6d69      	ldr	r1, [r5, #84]	; 0x54
    return HAL_ERROR;
 8000cb4:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	7022      	strb	r2, [r4, #0]
}
 8000cbe:	bd30      	pop	{r4, r5, pc}
 8000cc0:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 8000cc2:	684d      	ldr	r5, [r1, #4]
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_ADC_ConfigChannel+0x74>)
 8000cc6:	6809      	ldr	r1, [r1, #0]
 8000cc8:	0280      	lsls	r0, r0, #10
 8000cca:	429d      	cmp	r5, r3
 8000ccc:	d00f      	beq.n	8000cee <HAL_ADC_ConfigChannel+0x5a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000cce:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8000cd0:	034b      	lsls	r3, r1, #13
 8000cd2:	0b5b      	lsrs	r3, r3, #13
 8000cd4:	432b      	orrs	r3, r5
 8000cd6:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000cd8:	4201      	tst	r1, r0
 8000cda:	d005      	beq.n	8000ce8 <HAL_ADC_ConfigChannel+0x54>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <HAL_ADC_ConfigChannel+0x78>)
 8000ce0:	03db      	lsls	r3, r3, #15
 8000ce2:	6811      	ldr	r1, [r2, #0]
 8000ce4:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000ce6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8000cec:	e7e7      	b.n	8000cbe <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000cee:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000cf0:	034d      	lsls	r5, r1, #13
 8000cf2:	0b6d      	lsrs	r5, r5, #13
 8000cf4:	43ab      	bics	r3, r5
 8000cf6:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000cf8:	4201      	tst	r1, r0
 8000cfa:	d0f5      	beq.n	8000ce8 <HAL_ADC_ConfigChannel+0x54>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <HAL_ADC_ConfigChannel+0x78>)
 8000cfe:	4904      	ldr	r1, [pc, #16]	; (8000d10 <HAL_ADC_ConfigChannel+0x7c>)
 8000d00:	6813      	ldr	r3, [r2, #0]
 8000d02:	400b      	ands	r3, r1
 8000d04:	e7ef      	b.n	8000ce6 <HAL_ADC_ConfigChannel+0x52>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	00001001 	.word	0x00001001
 8000d0c:	40012708 	.word	0x40012708
 8000d10:	ffbfffff 	.word	0xffbfffff

08000d14 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d16:	0005      	movs	r5, r0
 8000d18:	3550      	adds	r5, #80	; 0x50
 8000d1a:	782b      	ldrb	r3, [r5, #0]
{
 8000d1c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000d1e:	2002      	movs	r0, #2
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d03f      	beq.n	8000da4 <HAL_ADCEx_Calibration_Start+0x90>
 8000d24:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d26:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8000d28:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	6898      	ldr	r0, [r3, #8]
 8000d2e:	4010      	ands	r0, r2
 8000d30:	2801      	cmp	r0, #1
 8000d32:	d102      	bne.n	8000d3a <HAL_ADCEx_Calibration_Start+0x26>
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	4202      	tst	r2, r0
 8000d38:	d135      	bne.n	8000da6 <HAL_ADCEx_Calibration_Start+0x92>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000d3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d3c:	491c      	ldr	r1, [pc, #112]	; (8000db0 <HAL_ADCEx_Calibration_Start+0x9c>)
 8000d3e:	4011      	ands	r1, r2
 8000d40:	2202      	movs	r2, #2
 8000d42:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000d44:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8000d46:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000d48:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	438a      	bics	r2, r1
 8000d4e:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	6899      	ldr	r1, [r3, #8]
 8000d54:	0612      	lsls	r2, r2, #24
 8000d56:	430a      	orrs	r2, r1
 8000d58:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000d5a:	f7ff fd6b 	bl	8000834 <HAL_GetTick>
 8000d5e:	0007      	movs	r7, r0
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000d60:	6823      	ldr	r3, [r4, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	db0e      	blt.n	8000d86 <HAL_ADCEx_Calibration_Start+0x72>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000d68:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000d6a:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000d6c:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000d6e:	430e      	orrs	r6, r1
 8000d70:	60de      	str	r6, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d72:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d74:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8000d76:	4393      	bics	r3, r2
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d80:	2300      	movs	r3, #0
 8000d82:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8000d84:	e00e      	b.n	8000da4 <HAL_ADCEx_Calibration_Start+0x90>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000d86:	f7ff fd55 	bl	8000834 <HAL_GetTick>
 8000d8a:	1bc0      	subs	r0, r0, r7
 8000d8c:	280a      	cmp	r0, #10
 8000d8e:	d9e7      	bls.n	8000d60 <HAL_ADCEx_Calibration_Start+0x4c>
        ADC_STATE_CLR_SET(hadc->State,
 8000d90:	2212      	movs	r2, #18
 8000d92:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8000d94:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000d96:	4393      	bics	r3, r2
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8000da0:	2300      	movs	r3, #0
 8000da2:	702b      	strb	r3, [r5, #0]
}
 8000da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da6:	2320      	movs	r3, #32
 8000da8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000daa:	4313      	orrs	r3, r2
 8000dac:	6563      	str	r3, [r4, #84]	; 0x54
 8000dae:	e7e7      	b.n	8000d80 <HAL_ADCEx_Calibration_Start+0x6c>
 8000db0:	fffffefd 	.word	0xfffffefd

08000db4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db4:	b570      	push	{r4, r5, r6, lr}
 8000db6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000db8:	2800      	cmp	r0, #0
 8000dba:	da14      	bge.n	8000de6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	b2c0      	uxtb	r0, r0
 8000dc0:	4003      	ands	r3, r0
 8000dc2:	3b08      	subs	r3, #8
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_NVIC_SetPriority+0x58>)
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4010      	ands	r0, r2
 8000dd0:	4090      	lsls	r0, r2
 8000dd2:	32fc      	adds	r2, #252	; 0xfc
 8000dd4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dd6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ddc:	69dc      	ldr	r4, [r3, #28]
 8000dde:	43ac      	bics	r4, r5
 8000de0:	4321      	orrs	r1, r4
 8000de2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000de4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de6:	2503      	movs	r5, #3
 8000de8:	0883      	lsrs	r3, r0, #2
 8000dea:	4028      	ands	r0, r5
 8000dec:	40a8      	lsls	r0, r5
 8000dee:	35fc      	adds	r5, #252	; 0xfc
 8000df0:	002e      	movs	r6, r5
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_NVIC_SetPriority+0x5c>)
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	189b      	adds	r3, r3, r2
 8000df8:	22c0      	movs	r2, #192	; 0xc0
 8000dfa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dfc:	4029      	ands	r1, r5
 8000dfe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e00:	0092      	lsls	r2, r2, #2
 8000e02:	589c      	ldr	r4, [r3, r2]
 8000e04:	43b4      	bics	r4, r6
 8000e06:	4321      	orrs	r1, r4
 8000e08:	5099      	str	r1, [r3, r2]
 8000e0a:	e7eb      	b.n	8000de4 <HAL_NVIC_SetPriority+0x30>
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <HAL_SYSTICK_Config+0x28>)
 8000e16:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e18:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d80d      	bhi.n	8000e3a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e22:	4808      	ldr	r0, [pc, #32]	; (8000e44 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e26:	6a03      	ldr	r3, [r0, #32]
 8000e28:	0609      	lsls	r1, r1, #24
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e32:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e34:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e36:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e38:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e3a:	4770      	bx	lr
 8000e3c:	00ffffff 	.word	0x00ffffff
 8000e40:	e000e010 	.word	0xe000e010
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e4a:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <HAL_GPIO_Init+0x144>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e4c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e4e:	1882      	adds	r2, r0, r2
 8000e50:	1e54      	subs	r4, r2, #1
 8000e52:	41a2      	sbcs	r2, r4
{
 8000e54:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e56:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000e58:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e5a:	3205      	adds	r2, #5
 8000e5c:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e5e:	9a01      	ldr	r2, [sp, #4]
 8000e60:	40da      	lsrs	r2, r3
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000e64:	b005      	add	sp, #20
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e68:	2501      	movs	r5, #1
 8000e6a:	409d      	lsls	r5, r3
 8000e6c:	9a01      	ldr	r2, [sp, #4]
 8000e6e:	402a      	ands	r2, r5
 8000e70:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000e72:	d100      	bne.n	8000e76 <HAL_GPIO_Init+0x2e>
 8000e74:	e088      	b.n	8000f88 <HAL_GPIO_Init+0x140>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e76:	684a      	ldr	r2, [r1, #4]
 8000e78:	4694      	mov	ip, r2
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	4664      	mov	r4, ip
 8000e7e:	4394      	bics	r4, r2
 8000e80:	0022      	movs	r2, r4
 8000e82:	3c01      	subs	r4, #1
 8000e84:	2a02      	cmp	r2, #2
 8000e86:	d11f      	bne.n	8000ec8 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e88:	2407      	movs	r4, #7
 8000e8a:	270f      	movs	r7, #15
 8000e8c:	401c      	ands	r4, r3
 8000e8e:	00a4      	lsls	r4, r4, #2
 8000e90:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	1882      	adds	r2, r0, r2
 8000e98:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e9a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000e9c:	690f      	ldr	r7, [r1, #16]
 8000e9e:	40a7      	lsls	r7, r4
 8000ea0:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000ea2:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ea4:	2403      	movs	r4, #3
 8000ea6:	005e      	lsls	r6, r3, #1
 8000ea8:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000eaa:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eac:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	68cc      	ldr	r4, [r1, #12]
 8000eb0:	40b4      	lsls	r4, r6
 8000eb2:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000eb4:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	06d2      	lsls	r2, r2, #27
 8000eba:	0fd2      	lsrs	r2, r2, #31
 8000ebc:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8000ebe:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ec2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000ec4:	6042      	str	r2, [r0, #4]
 8000ec6:	e001      	b.n	8000ecc <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	2c01      	cmp	r4, #1
 8000eca:	d9eb      	bls.n	8000ea4 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ecc:	2403      	movs	r4, #3
 8000ece:	0025      	movs	r5, r4
 8000ed0:	005e      	lsls	r6, r3, #1
 8000ed2:	40b5      	lsls	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed4:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	4022      	ands	r2, r4
 8000eda:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 8000edc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ede:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000ee2:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000ee4:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ee6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000ee8:	688a      	ldr	r2, [r1, #8]
 8000eea:	40b2      	lsls	r2, r6
 8000eec:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000eee:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000ef0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ef2:	00d2      	lsls	r2, r2, #3
 8000ef4:	d548      	bpl.n	8000f88 <HAL_GPIO_Init+0x140>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2701      	movs	r7, #1
 8000ef8:	4d25      	ldr	r5, [pc, #148]	; (8000f90 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000efa:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000efe:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	433a      	orrs	r2, r7
 8000f02:	636a      	str	r2, [r5, #52]	; 0x34
 8000f04:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <HAL_GPIO_Init+0x14c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f06:	089d      	lsrs	r5, r3, #2
 8000f08:	00ad      	lsls	r5, r5, #2
 8000f0a:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f10:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000f12:	4396      	bics	r6, r2
 8000f14:	9602      	str	r6, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f16:	26a0      	movs	r6, #160	; 0xa0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	05f6      	lsls	r6, r6, #23
 8000f1c:	42b0      	cmp	r0, r6
 8000f1e:	d008      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
 8000f20:	4e1d      	ldr	r6, [pc, #116]	; (8000f98 <HAL_GPIO_Init+0x150>)
 8000f22:	003a      	movs	r2, r7
 8000f24:	42b0      	cmp	r0, r6
 8000f26:	d004      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
 8000f28:	4f1c      	ldr	r7, [pc, #112]	; (8000f9c <HAL_GPIO_Init+0x154>)
 8000f2a:	1892      	adds	r2, r2, r2
 8000f2c:	42b8      	cmp	r0, r7
 8000f2e:	d000      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
 8000f30:	9a03      	ldr	r2, [sp, #12]
 8000f32:	40a2      	lsls	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f34:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f36:	9c02      	ldr	r4, [sp, #8]
 8000f38:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3a:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 8000f3c:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000f40:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000f42:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000f46:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f48:	03ff      	lsls	r7, r7, #15
 8000f4a:	d401      	bmi.n	8000f50 <HAL_GPIO_Init+0x108>
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	0035      	movs	r5, r6
 8000f4e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f50:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000f52:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000f54:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000f56:	9d00      	ldr	r5, [sp, #0]
 8000f58:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5a:	03bf      	lsls	r7, r7, #14
 8000f5c:	d401      	bmi.n	8000f62 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000f5e:	0035      	movs	r5, r6
 8000f60:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f62:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000f64:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000f66:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000f68:	9d00      	ldr	r5, [sp, #0]
 8000f6a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6c:	02ff      	lsls	r7, r7, #11
 8000f6e:	d401      	bmi.n	8000f74 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000f70:	0035      	movs	r5, r6
 8000f72:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000f76:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000f78:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000f7a:	9e00      	ldr	r6, [sp, #0]
 8000f7c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f7e:	02bf      	lsls	r7, r7, #10
 8000f80:	d401      	bmi.n	8000f86 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8000f82:	4025      	ands	r5, r4
 8000f84:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000f86:	60d6      	str	r6, [r2, #12]
    position++;
 8000f88:	3301      	adds	r3, #1
 8000f8a:	e768      	b.n	8000e5e <HAL_GPIO_Init+0x16>
 8000f8c:	afffe400 	.word	0xafffe400
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	50000400 	.word	0x50000400
 8000f9c:	50000800 	.word	0x50000800
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000faa:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000fac:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000fae:	e7fc      	b.n	8000faa <HAL_GPIO_WritePin+0x6>

08000fb0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000fb4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000fb6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	2a08      	cmp	r2, #8
 8000fbc:	d026      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x5c>
 8000fbe:	2a0c      	cmp	r2, #12
 8000fc0:	d006      	beq.n	8000fd0 <HAL_RCC_GetSysClockFreq+0x20>
 8000fc2:	2a04      	cmp	r2, #4
 8000fc4:	d11a      	bne.n	8000ffc <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	06db      	lsls	r3, r3, #27
 8000fca:	d421      	bmi.n	8001010 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000fcc:	4812      	ldr	r0, [pc, #72]	; (8001018 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8000fce:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000fd0:	028a      	lsls	r2, r1, #10
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000fd4:	0f12      	lsrs	r2, r2, #28
 8000fd6:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000fd8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fda:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000fdc:	0f89      	lsrs	r1, r1, #30
 8000fde:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fe0:	03c0      	lsls	r0, r0, #15
 8000fe2:	d504      	bpl.n	8000fee <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000fe6:	4350      	muls	r0, r2
 8000fe8:	f7ff f88e 	bl	8000108 <__udivsi3>
 8000fec:	e7ef      	b.n	8000fce <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	06db      	lsls	r3, r3, #27
 8000ff2:	d501      	bpl.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ff6:	e7f6      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <HAL_RCC_GetSysClockFreq+0x68>)
 8000ffa:	e7f4      	b.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000ffc:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ffe:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001000:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001006:	3301      	adds	r3, #1
 8001008:	4098      	lsls	r0, r3
 800100a:	e7e0      	b.n	8000fce <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <HAL_RCC_GetSysClockFreq+0x70>)
 800100e:	e7de      	b.n	8000fce <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001012:	e7dc      	b.n	8000fce <HAL_RCC_GetSysClockFreq+0x1e>
 8001014:	40021000 	.word	0x40021000
 8001018:	00f42400 	.word	0x00f42400
 800101c:	08001db8 	.word	0x08001db8
 8001020:	007a1200 	.word	0x007a1200
 8001024:	003d0900 	.word	0x003d0900

08001028 <HAL_RCC_OscConfig>:
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	0005      	movs	r5, r0
 800102c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800102e:	2800      	cmp	r0, #0
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001032:	2001      	movs	r0, #1
}
 8001034:	b007      	add	sp, #28
 8001036:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001038:	230c      	movs	r3, #12
 800103a:	4cc0      	ldr	r4, [pc, #768]	; (800133c <HAL_RCC_OscConfig+0x314>)
 800103c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800103e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001040:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	025b      	lsls	r3, r3, #9
 8001046:	401a      	ands	r2, r3
 8001048:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	6802      	ldr	r2, [r0, #0]
 800104c:	07d2      	lsls	r2, r2, #31
 800104e:	d43d      	bmi.n	80010cc <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	079b      	lsls	r3, r3, #30
 8001054:	d500      	bpl.n	8001058 <HAL_RCC_OscConfig+0x30>
 8001056:	e083      	b.n	8001160 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	06db      	lsls	r3, r3, #27
 800105c:	d528      	bpl.n	80010b0 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800105e:	2e00      	cmp	r6, #0
 8001060:	d000      	beq.n	8001064 <HAL_RCC_OscConfig+0x3c>
 8001062:	e0dd      	b.n	8001220 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	059b      	lsls	r3, r3, #22
 8001068:	d502      	bpl.n	8001070 <HAL_RCC_OscConfig+0x48>
 800106a:	69ab      	ldr	r3, [r5, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0e0      	beq.n	8001032 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001070:	6862      	ldr	r2, [r4, #4]
 8001072:	49b3      	ldr	r1, [pc, #716]	; (8001340 <HAL_RCC_OscConfig+0x318>)
 8001074:	6a2b      	ldr	r3, [r5, #32]
 8001076:	400a      	ands	r2, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107c:	6861      	ldr	r1, [r4, #4]
 800107e:	69ea      	ldr	r2, [r5, #28]
 8001080:	0209      	lsls	r1, r1, #8
 8001082:	0a09      	lsrs	r1, r1, #8
 8001084:	0612      	lsls	r2, r2, #24
 8001086:	430a      	orrs	r2, r1
 8001088:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	0b5b      	lsrs	r3, r3, #13
 800108e:	3301      	adds	r3, #1
 8001090:	0212      	lsls	r2, r2, #8
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001096:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001098:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800109a:	060a      	lsls	r2, r1, #24
 800109c:	49a9      	ldr	r1, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x31c>)
 800109e:	0f12      	lsrs	r2, r2, #28
 80010a0:	5c8a      	ldrb	r2, [r1, r2]
 80010a2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010a4:	4aa8      	ldr	r2, [pc, #672]	; (8001348 <HAL_RCC_OscConfig+0x320>)
 80010a6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80010a8:	f7ff fb90 	bl	80007cc <HAL_InitTick>
        if(status != HAL_OK)
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d1c1      	bne.n	8001034 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b0:	682b      	ldr	r3, [r5, #0]
 80010b2:	071b      	lsls	r3, r3, #28
 80010b4:	d500      	bpl.n	80010b8 <HAL_RCC_OscConfig+0x90>
 80010b6:	e0ea      	b.n	800128e <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	075b      	lsls	r3, r3, #29
 80010bc:	d500      	bpl.n	80010c0 <HAL_RCC_OscConfig+0x98>
 80010be:	e10c      	b.n	80012da <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d000      	beq.n	80010c8 <HAL_RCC_OscConfig+0xa0>
 80010c6:	e191      	b.n	80013ec <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 80010c8:	2000      	movs	r0, #0
 80010ca:	e7b3      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010cc:	2e08      	cmp	r6, #8
 80010ce:	d004      	beq.n	80010da <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d0:	2e0c      	cmp	r6, #12
 80010d2:	d109      	bne.n	80010e8 <HAL_RCC_OscConfig+0xc0>
 80010d4:	9a01      	ldr	r2, [sp, #4]
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	d006      	beq.n	80010e8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	039b      	lsls	r3, r3, #14
 80010de:	d5b7      	bpl.n	8001050 <HAL_RCC_OscConfig+0x28>
 80010e0:	686b      	ldr	r3, [r5, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1b4      	bne.n	8001050 <HAL_RCC_OscConfig+0x28>
 80010e6:	e7a4      	b.n	8001032 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e8:	686a      	ldr	r2, [r5, #4]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d111      	bne.n	8001112 <HAL_RCC_OscConfig+0xea>
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010f4:	f7ff fb9e 	bl	8000834 <HAL_GetTick>
 80010f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	0292      	lsls	r2, r2, #10
 8001100:	4213      	tst	r3, r2
 8001102:	d1a5      	bne.n	8001050 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fb96 	bl	8000834 <HAL_GetTick>
 8001108:	1bc0      	subs	r0, r0, r7
 800110a:	2864      	cmp	r0, #100	; 0x64
 800110c:	d9f5      	bls.n	80010fa <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e790      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001112:	21a0      	movs	r1, #160	; 0xa0
 8001114:	02c9      	lsls	r1, r1, #11
 8001116:	428a      	cmp	r2, r1
 8001118:	d105      	bne.n	8001126 <HAL_RCC_OscConfig+0xfe>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	6821      	ldr	r1, [r4, #0]
 800111e:	02d2      	lsls	r2, r2, #11
 8001120:	430a      	orrs	r2, r1
 8001122:	6022      	str	r2, [r4, #0]
 8001124:	e7e3      	b.n	80010ee <HAL_RCC_OscConfig+0xc6>
 8001126:	6821      	ldr	r1, [r4, #0]
 8001128:	4888      	ldr	r0, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x324>)
 800112a:	4001      	ands	r1, r0
 800112c:	6021      	str	r1, [r4, #0]
 800112e:	6821      	ldr	r1, [r4, #0]
 8001130:	400b      	ands	r3, r1
 8001132:	9305      	str	r3, [sp, #20]
 8001134:	9b05      	ldr	r3, [sp, #20]
 8001136:	4986      	ldr	r1, [pc, #536]	; (8001350 <HAL_RCC_OscConfig+0x328>)
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	400b      	ands	r3, r1
 800113c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800113e:	2a00      	cmp	r2, #0
 8001140:	d1d8      	bne.n	80010f4 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8001142:	f7ff fb77 	bl	8000834 <HAL_GetTick>
 8001146:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	0292      	lsls	r2, r2, #10
 800114e:	4213      	tst	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_RCC_OscConfig+0x12c>
 8001152:	e77d      	b.n	8001050 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fb6e 	bl	8000834 <HAL_GetTick>
 8001158:	1bc0      	subs	r0, r0, r7
 800115a:	2864      	cmp	r0, #100	; 0x64
 800115c:	d9f4      	bls.n	8001148 <HAL_RCC_OscConfig+0x120>
 800115e:	e7d6      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001160:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8001162:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001164:	4213      	tst	r3, r2
 8001166:	d003      	beq.n	8001170 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001168:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800116a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800116c:	4311      	orrs	r1, r2
 800116e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001170:	2e04      	cmp	r6, #4
 8001172:	d004      	beq.n	800117e <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001174:	2e0c      	cmp	r6, #12
 8001176:	d125      	bne.n	80011c4 <HAL_RCC_OscConfig+0x19c>
 8001178:	9a01      	ldr	r2, [sp, #4]
 800117a:	2a00      	cmp	r2, #0
 800117c:	d122      	bne.n	80011c4 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800117e:	6822      	ldr	r2, [r4, #0]
 8001180:	0752      	lsls	r2, r2, #29
 8001182:	d502      	bpl.n	800118a <HAL_RCC_OscConfig+0x162>
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x162>
 8001188:	e753      	b.n	8001032 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	6861      	ldr	r1, [r4, #4]
 800118c:	692a      	ldr	r2, [r5, #16]
 800118e:	4871      	ldr	r0, [pc, #452]	; (8001354 <HAL_RCC_OscConfig+0x32c>)
 8001190:	0212      	lsls	r2, r2, #8
 8001192:	4001      	ands	r1, r0
 8001194:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001196:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800119a:	6822      	ldr	r2, [r4, #0]
 800119c:	438a      	bics	r2, r1
 800119e:	4313      	orrs	r3, r2
 80011a0:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011a2:	f7ff ff05 	bl	8000fb0 <HAL_RCC_GetSysClockFreq>
 80011a6:	68e3      	ldr	r3, [r4, #12]
 80011a8:	4a66      	ldr	r2, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x31c>)
 80011aa:	061b      	lsls	r3, r3, #24
 80011ac:	0f1b      	lsrs	r3, r3, #28
 80011ae:	5cd3      	ldrb	r3, [r2, r3]
 80011b0:	40d8      	lsrs	r0, r3
 80011b2:	4b65      	ldr	r3, [pc, #404]	; (8001348 <HAL_RCC_OscConfig+0x320>)
 80011b4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fb08 	bl	80007cc <HAL_InitTick>
      if(status != HAL_OK)
 80011bc:	2800      	cmp	r0, #0
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x19a>
 80011c0:	e74a      	b.n	8001058 <HAL_RCC_OscConfig+0x30>
 80011c2:	e737      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d019      	beq.n	80011fc <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011c8:	2109      	movs	r1, #9
 80011ca:	6822      	ldr	r2, [r4, #0]
 80011cc:	438a      	bics	r2, r1
 80011ce:	4313      	orrs	r3, r2
 80011d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011d2:	f7ff fb2f 	bl	8000834 <HAL_GetTick>
 80011d6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011d8:	2204      	movs	r2, #4
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	4213      	tst	r3, r2
 80011de:	d007      	beq.n	80011f0 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	6862      	ldr	r2, [r4, #4]
 80011e2:	692b      	ldr	r3, [r5, #16]
 80011e4:	495b      	ldr	r1, [pc, #364]	; (8001354 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	400a      	ands	r2, r1
 80011ea:	4313      	orrs	r3, r2
 80011ec:	6063      	str	r3, [r4, #4]
 80011ee:	e733      	b.n	8001058 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fb20 	bl	8000834 <HAL_GetTick>
 80011f4:	1bc0      	subs	r0, r0, r7
 80011f6:	2802      	cmp	r0, #2
 80011f8:	d9ee      	bls.n	80011d8 <HAL_RCC_OscConfig+0x1b0>
 80011fa:	e788      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 80011fc:	2201      	movs	r2, #1
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	4393      	bics	r3, r2
 8001202:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001204:	f7ff fb16 	bl	8000834 <HAL_GetTick>
 8001208:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800120a:	2204      	movs	r2, #4
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	4213      	tst	r3, r2
 8001210:	d100      	bne.n	8001214 <HAL_RCC_OscConfig+0x1ec>
 8001212:	e721      	b.n	8001058 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001214:	f7ff fb0e 	bl	8000834 <HAL_GetTick>
 8001218:	1bc0      	subs	r0, r0, r7
 800121a:	2802      	cmp	r0, #2
 800121c:	d9f5      	bls.n	800120a <HAL_RCC_OscConfig+0x1e2>
 800121e:	e776      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001220:	69ab      	ldr	r3, [r5, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d020      	beq.n	8001268 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	6822      	ldr	r2, [r4, #0]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4313      	orrs	r3, r2
 800122e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001230:	f7ff fb00 	bl	8000834 <HAL_GetTick>
 8001234:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4213      	tst	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001240:	6863      	ldr	r3, [r4, #4]
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x318>)
 8001244:	4013      	ands	r3, r2
 8001246:	6a2a      	ldr	r2, [r5, #32]
 8001248:	4313      	orrs	r3, r2
 800124a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124c:	6862      	ldr	r2, [r4, #4]
 800124e:	69eb      	ldr	r3, [r5, #28]
 8001250:	0212      	lsls	r2, r2, #8
 8001252:	061b      	lsls	r3, r3, #24
 8001254:	0a12      	lsrs	r2, r2, #8
 8001256:	4313      	orrs	r3, r2
 8001258:	6063      	str	r3, [r4, #4]
 800125a:	e729      	b.n	80010b0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800125c:	f7ff faea 	bl	8000834 <HAL_GetTick>
 8001260:	1bc0      	subs	r0, r0, r7
 8001262:	2802      	cmp	r0, #2
 8001264:	d9e7      	bls.n	8001236 <HAL_RCC_OscConfig+0x20e>
 8001266:	e752      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8001268:	6823      	ldr	r3, [r4, #0]
 800126a:	4a3b      	ldr	r2, [pc, #236]	; (8001358 <HAL_RCC_OscConfig+0x330>)
 800126c:	4013      	ands	r3, r2
 800126e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001270:	f7ff fae0 	bl	8000834 <HAL_GetTick>
 8001274:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4213      	tst	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x25a>
 8001280:	e716      	b.n	80010b0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001282:	f7ff fad7 	bl	8000834 <HAL_GetTick>
 8001286:	1bc0      	subs	r0, r0, r7
 8001288:	2802      	cmp	r0, #2
 800128a:	d9f4      	bls.n	8001276 <HAL_RCC_OscConfig+0x24e>
 800128c:	e73f      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	696a      	ldr	r2, [r5, #20]
 8001290:	2301      	movs	r3, #1
 8001292:	2a00      	cmp	r2, #0
 8001294:	d010      	beq.n	80012b8 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 8001296:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001298:	4313      	orrs	r3, r2
 800129a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800129c:	f7ff faca 	bl	8000834 <HAL_GetTick>
 80012a0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012a2:	2202      	movs	r2, #2
 80012a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012a6:	4213      	tst	r3, r2
 80012a8:	d000      	beq.n	80012ac <HAL_RCC_OscConfig+0x284>
 80012aa:	e705      	b.n	80010b8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ac:	f7ff fac2 	bl	8000834 <HAL_GetTick>
 80012b0:	1bc0      	subs	r0, r0, r7
 80012b2:	2802      	cmp	r0, #2
 80012b4:	d9f5      	bls.n	80012a2 <HAL_RCC_OscConfig+0x27a>
 80012b6:	e72a      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 80012b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80012ba:	439a      	bics	r2, r3
 80012bc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80012be:	f7ff fab9 	bl	8000834 <HAL_GetTick>
 80012c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012c4:	2202      	movs	r2, #2
 80012c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012c8:	4213      	tst	r3, r2
 80012ca:	d100      	bne.n	80012ce <HAL_RCC_OscConfig+0x2a6>
 80012cc:	e6f4      	b.n	80010b8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ce:	f7ff fab1 	bl	8000834 <HAL_GetTick>
 80012d2:	1bc0      	subs	r0, r0, r7
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f5      	bls.n	80012c4 <HAL_RCC_OscConfig+0x29c>
 80012d8:	e719      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80012dc:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012e0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e4:	421a      	tst	r2, r3
 80012e6:	d104      	bne.n	80012f2 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012ea:	4313      	orrs	r3, r2
 80012ec:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	4f19      	ldr	r7, [pc, #100]	; (800135c <HAL_RCC_OscConfig+0x334>)
 80012f6:	0052      	lsls	r2, r2, #1
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4213      	tst	r3, r2
 80012fc:	d008      	beq.n	8001310 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	68ab      	ldr	r3, [r5, #8]
 8001302:	0052      	lsls	r2, r2, #1
 8001304:	4293      	cmp	r3, r2
 8001306:	d12b      	bne.n	8001360 <HAL_RCC_OscConfig+0x338>
 8001308:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800130a:	4313      	orrs	r3, r2
 800130c:	6523      	str	r3, [r4, #80]	; 0x50
 800130e:	e04c      	b.n	80013aa <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	0052      	lsls	r2, r2, #1
 8001316:	4313      	orrs	r3, r2
 8001318:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800131a:	f7ff fa8b 	bl	8000834 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8001322:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	9303      	str	r3, [sp, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	9a03      	ldr	r2, [sp, #12]
 800132a:	4213      	tst	r3, r2
 800132c:	d1e7      	bne.n	80012fe <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fa81 	bl	8000834 <HAL_GetTick>
 8001332:	9b02      	ldr	r3, [sp, #8]
 8001334:	1ac0      	subs	r0, r0, r3
 8001336:	2864      	cmp	r0, #100	; 0x64
 8001338:	d9f5      	bls.n	8001326 <HAL_RCC_OscConfig+0x2fe>
 800133a:	e6e8      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
 800133c:	40021000 	.word	0x40021000
 8001340:	ffff1fff 	.word	0xffff1fff
 8001344:	08001da8 	.word	0x08001da8
 8001348:	20000000 	.word	0x20000000
 800134c:	fffeffff 	.word	0xfffeffff
 8001350:	fffbffff 	.word	0xfffbffff
 8001354:	ffffe0ff 	.word	0xffffe0ff
 8001358:	fffffeff 	.word	0xfffffeff
 800135c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	2b00      	cmp	r3, #0
 8001362:	d116      	bne.n	8001392 <HAL_RCC_OscConfig+0x36a>
 8001364:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001366:	4a53      	ldr	r2, [pc, #332]	; (80014b4 <HAL_RCC_OscConfig+0x48c>)
 8001368:	4013      	ands	r3, r2
 800136a:	6523      	str	r3, [r4, #80]	; 0x50
 800136c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800136e:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <HAL_RCC_OscConfig+0x490>)
 8001370:	4013      	ands	r3, r2
 8001372:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001374:	f7ff fa5e 	bl	8000834 <HAL_GetTick>
 8001378:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4213      	tst	r3, r2
 8001382:	d02a      	beq.n	80013da <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff fa56 	bl	8000834 <HAL_GetTick>
 8001388:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <HAL_RCC_OscConfig+0x494>)
 800138a:	1bc0      	subs	r0, r0, r7
 800138c:	4298      	cmp	r0, r3
 800138e:	d9f4      	bls.n	800137a <HAL_RCC_OscConfig+0x352>
 8001390:	e6bd      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001392:	21a0      	movs	r1, #160	; 0xa0
 8001394:	00c9      	lsls	r1, r1, #3
 8001396:	428b      	cmp	r3, r1
 8001398:	d10b      	bne.n	80013b2 <HAL_RCC_OscConfig+0x38a>
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6523      	str	r3, [r4, #80]	; 0x50
 80013a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013a6:	431a      	orrs	r2, r3
 80013a8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80013aa:	f7ff fa43 	bl	8000834 <HAL_GetTick>
 80013ae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013b0:	e00e      	b.n	80013d0 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013b4:	4a3f      	ldr	r2, [pc, #252]	; (80014b4 <HAL_RCC_OscConfig+0x48c>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	6523      	str	r3, [r4, #80]	; 0x50
 80013ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013bc:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <HAL_RCC_OscConfig+0x490>)
 80013be:	4013      	ands	r3, r2
 80013c0:	e7a4      	b.n	800130c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fa37 	bl	8000834 <HAL_GetTick>
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_RCC_OscConfig+0x494>)
 80013c8:	1bc0      	subs	r0, r0, r7
 80013ca:	4298      	cmp	r0, r3
 80013cc:	d900      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3a8>
 80013ce:	e69e      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4213      	tst	r3, r2
 80013d8:	d0f3      	beq.n	80013c2 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d000      	beq.n	80013e2 <HAL_RCC_OscConfig+0x3ba>
 80013e0:	e66e      	b.n	80010c0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013e4:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x498>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80013ea:	e669      	b.n	80010c0 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ec:	2e0c      	cmp	r6, #12
 80013ee:	d043      	beq.n	8001478 <HAL_RCC_OscConfig+0x450>
 80013f0:	4a34      	ldr	r2, [pc, #208]	; (80014c4 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d12e      	bne.n	8001454 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 80013f6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013f8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4013      	ands	r3, r2
 80013fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013fe:	f7ff fa19 	bl	8000834 <HAL_GetTick>
 8001402:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001404:	04b6      	lsls	r6, r6, #18
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	4233      	tst	r3, r6
 800140a:	d11d      	bne.n	8001448 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800140e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001410:	68e2      	ldr	r2, [r4, #12]
 8001412:	430b      	orrs	r3, r1
 8001414:	492c      	ldr	r1, [pc, #176]	; (80014c8 <HAL_RCC_OscConfig+0x4a0>)
 8001416:	400a      	ands	r2, r1
 8001418:	4313      	orrs	r3, r2
 800141a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800141c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141e:	4313      	orrs	r3, r2
 8001420:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	6822      	ldr	r2, [r4, #0]
 8001426:	045b      	lsls	r3, r3, #17
 8001428:	4313      	orrs	r3, r2
 800142a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800142c:	f7ff fa02 	bl	8000834 <HAL_GetTick>
 8001430:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001432:	04ad      	lsls	r5, r5, #18
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	422b      	tst	r3, r5
 8001438:	d000      	beq.n	800143c <HAL_RCC_OscConfig+0x414>
 800143a:	e645      	b.n	80010c8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f9fa 	bl	8000834 <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	2802      	cmp	r0, #2
 8001444:	d9f6      	bls.n	8001434 <HAL_RCC_OscConfig+0x40c>
 8001446:	e662      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff f9f4 	bl	8000834 <HAL_GetTick>
 800144c:	1bc0      	subs	r0, r0, r7
 800144e:	2802      	cmp	r0, #2
 8001450:	d9d9      	bls.n	8001406 <HAL_RCC_OscConfig+0x3de>
 8001452:	e65c      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8001454:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001456:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001458:	4013      	ands	r3, r2
 800145a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800145c:	f7ff f9ea 	bl	8000834 <HAL_GetTick>
 8001460:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001462:	04ad      	lsls	r5, r5, #18
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	422b      	tst	r3, r5
 8001468:	d100      	bne.n	800146c <HAL_RCC_OscConfig+0x444>
 800146a:	e62d      	b.n	80010c8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff f9e2 	bl	8000834 <HAL_GetTick>
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	2802      	cmp	r0, #2
 8001474:	d9f6      	bls.n	8001464 <HAL_RCC_OscConfig+0x43c>
 8001476:	e64a      	b.n	800110e <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8001478:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147a:	2b01      	cmp	r3, #1
 800147c:	d100      	bne.n	8001480 <HAL_RCC_OscConfig+0x458>
 800147e:	e5d9      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001480:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001482:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001486:	0252      	lsls	r2, r2, #9
 8001488:	401a      	ands	r2, r3
        return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	428a      	cmp	r2, r1
 800148e:	d000      	beq.n	8001492 <HAL_RCC_OscConfig+0x46a>
 8001490:	e5d0      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001492:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001494:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001496:	0392      	lsls	r2, r2, #14
 8001498:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	428a      	cmp	r2, r1
 800149c:	d000      	beq.n	80014a0 <HAL_RCC_OscConfig+0x478>
 800149e:	e5c9      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014a0:	20c0      	movs	r0, #192	; 0xc0
 80014a2:	0400      	lsls	r0, r0, #16
 80014a4:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80014a8:	1a18      	subs	r0, r3, r0
 80014aa:	1e43      	subs	r3, r0, #1
 80014ac:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80014ae:	b2c0      	uxtb	r0, r0
 80014b0:	e5c0      	b.n	8001034 <HAL_RCC_OscConfig+0xc>
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	fffffeff 	.word	0xfffffeff
 80014b8:	fffffbff 	.word	0xfffffbff
 80014bc:	00001388 	.word	0x00001388
 80014c0:	efffffff 	.word	0xefffffff
 80014c4:	feffffff 	.word	0xfeffffff
 80014c8:	ff02ffff 	.word	0xff02ffff

080014cc <HAL_RCC_ClockConfig>:
{
 80014cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014ce:	1e06      	subs	r6, r0, #0
 80014d0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80014d4:	2001      	movs	r0, #1
}
 80014d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	2201      	movs	r2, #1
 80014da:	4c51      	ldr	r4, [pc, #324]	; (8001620 <HAL_RCC_ClockConfig+0x154>)
 80014dc:	9901      	ldr	r1, [sp, #4]
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	4013      	ands	r3, r2
 80014e2:	428b      	cmp	r3, r1
 80014e4:	d327      	bcc.n	8001536 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e6:	6832      	ldr	r2, [r6, #0]
 80014e8:	0793      	lsls	r3, r2, #30
 80014ea:	d42f      	bmi.n	800154c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ec:	07d3      	lsls	r3, r2, #31
 80014ee:	d435      	bmi.n	800155c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	2301      	movs	r3, #1
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	9901      	ldr	r1, [sp, #4]
 80014f6:	401a      	ands	r2, r3
 80014f8:	4291      	cmp	r1, r2
 80014fa:	d200      	bcs.n	80014fe <HAL_RCC_ClockConfig+0x32>
 80014fc:	e081      	b.n	8001602 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fe:	6832      	ldr	r2, [r6, #0]
 8001500:	4c48      	ldr	r4, [pc, #288]	; (8001624 <HAL_RCC_ClockConfig+0x158>)
 8001502:	0753      	lsls	r3, r2, #29
 8001504:	d500      	bpl.n	8001508 <HAL_RCC_ClockConfig+0x3c>
 8001506:	e084      	b.n	8001612 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	0713      	lsls	r3, r2, #28
 800150a:	d506      	bpl.n	800151a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150c:	68e2      	ldr	r2, [r4, #12]
 800150e:	6933      	ldr	r3, [r6, #16]
 8001510:	4945      	ldr	r1, [pc, #276]	; (8001628 <HAL_RCC_ClockConfig+0x15c>)
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	400a      	ands	r2, r1
 8001516:	4313      	orrs	r3, r2
 8001518:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800151a:	f7ff fd49 	bl	8000fb0 <HAL_RCC_GetSysClockFreq>
 800151e:	68e3      	ldr	r3, [r4, #12]
 8001520:	4a42      	ldr	r2, [pc, #264]	; (800162c <HAL_RCC_ClockConfig+0x160>)
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	0f1b      	lsrs	r3, r3, #28
 8001526:	5cd3      	ldrb	r3, [r2, r3]
 8001528:	40d8      	lsrs	r0, r3
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_ClockConfig+0x164>)
 800152c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff f94c 	bl	80007cc <HAL_InitTick>
 8001534:	e7cf      	b.n	80014d6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	9901      	ldr	r1, [sp, #4]
 800153a:	4393      	bics	r3, r2
 800153c:	430b      	orrs	r3, r1
 800153e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	4013      	ands	r3, r2
 8001544:	9a01      	ldr	r2, [sp, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d1c4      	bne.n	80014d4 <HAL_RCC_ClockConfig+0x8>
 800154a:	e7cc      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	20f0      	movs	r0, #240	; 0xf0
 800154e:	4935      	ldr	r1, [pc, #212]	; (8001624 <HAL_RCC_ClockConfig+0x158>)
 8001550:	68cb      	ldr	r3, [r1, #12]
 8001552:	4383      	bics	r3, r0
 8001554:	68b0      	ldr	r0, [r6, #8]
 8001556:	4303      	orrs	r3, r0
 8001558:	60cb      	str	r3, [r1, #12]
 800155a:	e7c7      	b.n	80014ec <HAL_RCC_ClockConfig+0x20>
 800155c:	4d31      	ldr	r5, [pc, #196]	; (8001624 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001560:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001562:	2a02      	cmp	r2, #2
 8001564:	d119      	bne.n	800159a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001566:	039b      	lsls	r3, r3, #14
 8001568:	d5b4      	bpl.n	80014d4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	2103      	movs	r1, #3
 800156c:	68eb      	ldr	r3, [r5, #12]
 800156e:	438b      	bics	r3, r1
 8001570:	4313      	orrs	r3, r2
 8001572:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001574:	f7ff f95e 	bl	8000834 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001578:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800157a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800157c:	2b02      	cmp	r3, #2
 800157e:	d119      	bne.n	80015b4 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001580:	220c      	movs	r2, #12
 8001582:	68eb      	ldr	r3, [r5, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b08      	cmp	r3, #8
 8001588:	d0b2      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158a:	f7ff f953 	bl	8000834 <HAL_GetTick>
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_ClockConfig+0x168>)
 8001590:	1bc0      	subs	r0, r0, r7
 8001592:	4298      	cmp	r0, r3
 8001594:	d9f4      	bls.n	8001580 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8001596:	2003      	movs	r0, #3
 8001598:	e79d      	b.n	80014d6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159a:	2a03      	cmp	r2, #3
 800159c:	d102      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800159e:	019b      	lsls	r3, r3, #6
 80015a0:	d4e3      	bmi.n	800156a <HAL_RCC_ClockConfig+0x9e>
 80015a2:	e797      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015a4:	2a01      	cmp	r2, #1
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a8:	075b      	lsls	r3, r3, #29
 80015aa:	d4de      	bmi.n	800156a <HAL_RCC_ClockConfig+0x9e>
 80015ac:	e792      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ae:	059b      	lsls	r3, r3, #22
 80015b0:	d4db      	bmi.n	800156a <HAL_RCC_ClockConfig+0x9e>
 80015b2:	e78f      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d10b      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b8:	220c      	movs	r2, #12
 80015ba:	68eb      	ldr	r3, [r5, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	4293      	cmp	r3, r2
 80015c0:	d096      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c2:	f7ff f937 	bl	8000834 <HAL_GetTick>
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_ClockConfig+0x168>)
 80015c8:	1bc0      	subs	r0, r0, r7
 80015ca:	4298      	cmp	r0, r3
 80015cc:	d9f4      	bls.n	80015b8 <HAL_RCC_ClockConfig+0xec>
 80015ce:	e7e2      	b.n	8001596 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d010      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015d4:	220c      	movs	r2, #12
 80015d6:	68eb      	ldr	r3, [r5, #12]
 80015d8:	4213      	tst	r3, r2
 80015da:	d089      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015dc:	f7ff f92a 	bl	8000834 <HAL_GetTick>
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_RCC_ClockConfig+0x168>)
 80015e2:	1bc0      	subs	r0, r0, r7
 80015e4:	4298      	cmp	r0, r3
 80015e6:	d9f5      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x108>
 80015e8:	e7d5      	b.n	8001596 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ea:	f7ff f923 	bl	8000834 <HAL_GetTick>
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_RCC_ClockConfig+0x168>)
 80015f0:	1bc0      	subs	r0, r0, r7
 80015f2:	4298      	cmp	r0, r3
 80015f4:	d8cf      	bhi.n	8001596 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015f6:	220c      	movs	r2, #12
 80015f8:	68eb      	ldr	r3, [r5, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d1f4      	bne.n	80015ea <HAL_RCC_ClockConfig+0x11e>
 8001600:	e776      	b.n	80014f0 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	6822      	ldr	r2, [r4, #0]
 8001604:	439a      	bics	r2, r3
 8001606:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001608:	6822      	ldr	r2, [r4, #0]
 800160a:	421a      	tst	r2, r3
 800160c:	d000      	beq.n	8001610 <HAL_RCC_ClockConfig+0x144>
 800160e:	e761      	b.n	80014d4 <HAL_RCC_ClockConfig+0x8>
 8001610:	e775      	b.n	80014fe <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001612:	68e3      	ldr	r3, [r4, #12]
 8001614:	4908      	ldr	r1, [pc, #32]	; (8001638 <HAL_RCC_ClockConfig+0x16c>)
 8001616:	400b      	ands	r3, r1
 8001618:	68f1      	ldr	r1, [r6, #12]
 800161a:	430b      	orrs	r3, r1
 800161c:	60e3      	str	r3, [r4, #12]
 800161e:	e773      	b.n	8001508 <HAL_RCC_ClockConfig+0x3c>
 8001620:	40022000 	.word	0x40022000
 8001624:	40021000 	.word	0x40021000
 8001628:	ffffc7ff 	.word	0xffffc7ff
 800162c:	08001da8 	.word	0x08001da8
 8001630:	20000000 	.word	0x20000000
 8001634:	00001388 	.word	0x00001388
 8001638:	fffff8ff 	.word	0xfffff8ff

0800163c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800163c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	2508      	movs	r5, #8
 8001640:	2100      	movs	r1, #0
 8001642:	002a      	movs	r2, r5
 8001644:	4668      	mov	r0, sp
 8001646:	f000 fb3b 	bl	8001cc0 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800164a:	2280      	movs	r2, #128	; 0x80
  hadc.Instance = ADC1;
 800164c:	4c19      	ldr	r4, [pc, #100]	; (80016b4 <MX_ADC_Init+0x78>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800164e:	0312      	lsls	r2, r2, #12
  hadc.Instance = ADC1;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_ADC_Init+0x7c>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001652:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001654:	2207      	movs	r2, #7
  hadc.Instance = ADC1;
 8001656:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001658:	2300      	movs	r3, #0
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800165a:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800165c:	3a06      	subs	r2, #6
 800165e:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
 8001660:	18a2      	adds	r2, r4, r2
 8001662:	77d3      	strb	r3, [r2, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001664:	1ca2      	adds	r2, r4, #2
 8001666:	77d3      	strb	r3, [r2, #31]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001668:	22c2      	movs	r2, #194	; 0xc2
 800166a:	32ff      	adds	r2, #255	; 0xff
 800166c:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800166e:	0022      	movs	r2, r4
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8001670:	60a5      	str	r5, [r4, #8]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001672:	322c      	adds	r2, #44	; 0x2c
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001674:	2580      	movs	r5, #128	; 0x80
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001676:	7013      	strb	r3, [r2, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001678:	2204      	movs	r2, #4
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800167a:	016d      	lsls	r5, r5, #5
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800167c:	0020      	movs	r0, r4
  hadc.Init.OversamplingMode = DISABLE;
 800167e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001680:	60e3      	str	r3, [r4, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001682:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001684:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001686:	6325      	str	r5, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001688:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800168a:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800168c:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800168e:	f7ff f97d 	bl	800098c <HAL_ADC_Init>
 8001692:	2800      	cmp	r0, #0
 8001694:	d001      	beq.n	800169a <MX_ADC_Init+0x5e>
  {
    Error_Handler();
 8001696:	f000 f901 	bl	800189c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_ADC_Init+0x80>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800169c:	4669      	mov	r1, sp
 800169e:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80016a0:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80016a2:	9501      	str	r5, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80016a4:	f7ff faf6 	bl	8000c94 <HAL_ADC_ConfigChannel>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC_Init+0x74>
  {
    Error_Handler();
 80016ac:	f000 f8f6 	bl	800189c <Error_Handler>
  }

}
 80016b0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	20000024 	.word	0x20000024
 80016b8:	40012400 	.word	0x40012400
 80016bc:	0c000008 	.word	0x0c000008

080016c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016c0:	b510      	push	{r4, lr}
 80016c2:	0004      	movs	r4, r0
 80016c4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	2214      	movs	r2, #20
 80016c8:	2100      	movs	r1, #0
 80016ca:	a801      	add	r0, sp, #4
 80016cc:	f000 faf8 	bl	8001cc0 <memset>
  if(adcHandle->Instance==ADC1)
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_ADC_MspInit+0x4c>)
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d116      	bne.n	8001706 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_ADC_MspInit+0x50>)
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = Vbat_Level_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 80016e0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e2:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 80016ea:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	430a      	orrs	r2, r1
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	400b      	ands	r3, r1
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = Vbat_Level_Pin;
 80016f8:	2308      	movs	r3, #8
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 80016fa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = Vbat_Level_Pin;
 80016fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	3b05      	subs	r3, #5
 8001700:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 8001702:	f7ff fba1 	bl	8000e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001706:	b006      	add	sp, #24
 8001708:	bd10      	pop	{r4, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40012400 	.word	0x40012400
 8001710:	40021000 	.word	0x40021000

08001714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	2214      	movs	r2, #20
 800171a:	2100      	movs	r1, #0
 800171c:	a805      	add	r0, sp, #20
 800171e:	f000 facf 	bl	8001cc0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	2004      	movs	r0, #4
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001728:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin, GPIO_PIN_RESET);
 800172a:	4f36      	ldr	r7, [pc, #216]	; (8001804 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	4301      	orrs	r1, r0
 800172e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                          |MC_SEG_4C2_Pin|MC_SEG_3E2_Pin|MC_SEG_2D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001734:	4002      	ands	r2, r0
 8001736:	9201      	str	r2, [sp, #4]
 8001738:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173c:	307c      	adds	r0, #124	; 0x7c
 800173e:	4301      	orrs	r1, r0
 8001740:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 8001746:	4e30      	ldr	r6, [pc, #192]	; (8001808 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001748:	4002      	ands	r2, r0
 800174a:	9202      	str	r2, [sp, #8]
 800174c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin, GPIO_PIN_RESET);
 8001750:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	432a      	orrs	r2, r5
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	402a      	ands	r2, r5
 800175a:	9203      	str	r2, [sp, #12]
 800175c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	430a      	orrs	r2, r1
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	400b      	ands	r3, r1
 800176a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin, GPIO_PIN_RESET);
 800176c:	4927      	ldr	r1, [pc, #156]	; (800180c <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin, GPIO_PIN_RESET);
 8001770:	f7ff fc18 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MC_GLED2_Pin|MC_RLED2_Pin, GPIO_PIN_SET);
 8001774:	21c0      	movs	r1, #192	; 0xc0
 8001776:	002a      	movs	r2, r5
 8001778:	0038      	movs	r0, r7
 800177a:	0209      	lsls	r1, r1, #8
 800177c:	f7ff fc12 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, Sens_Echo_Pin|Sens_Trig_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2103      	movs	r1, #3
 8001784:	4822      	ldr	r0, [pc, #136]	; (8001810 <MX_GPIO_Init+0xfc>)
 8001786:	f7ff fc0d 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, MC_GLED1_Pin|MC_RLED1_Pin|Sens_PWR_Pin|MS_SEG_4C1_Pin 
 800178a:	20a0      	movs	r0, #160	; 0xa0
 800178c:	2200      	movs	r2, #0
 800178e:	4921      	ldr	r1, [pc, #132]	; (8001814 <MX_GPIO_Init+0x100>)
 8001790:	05c0      	lsls	r0, r0, #23
 8001792:	f7ff fc07 	bl	8000fa4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 8001796:	2200      	movs	r2, #0
 8001798:	0030      	movs	r0, r6
 800179a:	491f      	ldr	r1, [pc, #124]	; (8001818 <MX_GPIO_Init+0x104>)
 800179c:	f7ff fc02 	bl	8000fa4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	a905      	add	r1, sp, #20
 80017a4:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin;
 80017a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f7ff fb4b 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = Sens_Echo_Pin|Sens_Trig_Pin;
 80017b2:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017b4:	a905      	add	r1, sp, #20
 80017b6:	4816      	ldr	r0, [pc, #88]	; (8001810 <MX_GPIO_Init+0xfc>)
  GPIO_InitStruct.Pin = Sens_Echo_Pin|Sens_Trig_Pin;
 80017b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017c0:	f7ff fb42 	bl	8000e48 <HAL_GPIO_Init>
                          |MC_SEG_3E1_Pin|MC_SEG_2D1_Pin|MC_SEG_10G1_Pin|MC_GLED6_Pin 
                          |MC_GLED5_Pin|MC_RLED5_Pin|MC_RLED4_Pin|MC_GLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = MC_GLED1_Pin|MC_RLED1_Pin|Sens_PWR_Pin|MS_SEG_4C1_Pin 
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_GPIO_Init+0x100>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	a905      	add	r1, sp, #20
 80017ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = MC_GLED1_Pin|MC_RLED1_Pin|Sens_PWR_Pin|MS_SEG_4C1_Pin 
 80017cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ce:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f7ff fb38 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_GPIO_Init+0x104>)
                          |MC_SEG_10G2_Pin|MC_SEG_9F2_Pin|MC_SEG_8B2_Pin|MC_SEG_7A2_Pin 
                          |MC_SEG_4C2_Pin|MC_SEG_3E2_Pin|MC_SEG_2D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	a905      	add	r1, sp, #20
 80017dc:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 80017de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f7ff fb2f 	bl	8000e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Zero_Pin;
 80017ea:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW_Zero_GPIO_Port, &GPIO_InitStruct);
 80017ec:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SW_Zero_Pin;
 80017ee:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(SW_Zero_GPIO_Port, &GPIO_InitStruct);
 80017f0:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SW_Zero_Pin;
 80017f2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW_Zero_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f7ff fb26 	bl	8000e48 <HAL_GPIO_Init>

}
 80017fc:	b00b      	add	sp, #44	; 0x2c
 80017fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001800:	40021000 	.word	0x40021000
 8001804:	50000800 	.word	0x50000800
 8001808:	50000400 	.word	0x50000400
 800180c:	00002001 	.word	0x00002001
 8001810:	50001c00 	.word	0x50001c00
 8001814:	00009bf7 	.word	0x00009bf7
 8001818:	0000f7ff 	.word	0x0000f7ff
 800181c:	0000e001 	.word	0x0000e001

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b530      	push	{r4, r5, lr}
 8001822:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001824:	2234      	movs	r2, #52	; 0x34
 8001826:	2100      	movs	r1, #0
 8001828:	a805      	add	r0, sp, #20
 800182a:	f000 fa49 	bl	8001cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182e:	2214      	movs	r2, #20
 8001830:	2100      	movs	r1, #0
 8001832:	4668      	mov	r0, sp
 8001834:	f000 fa44 	bl	8001cc0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	490f      	ldr	r1, [pc, #60]	; (8001878 <SystemClock_Config+0x58>)
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <SystemClock_Config+0x5c>)
 800183c:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800183e:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001840:	401a      	ands	r2, r3
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001852:	330e      	adds	r3, #14
 8001854:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001856:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001858:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185a:	f7ff fbe5 	bl	8001028 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001860:	0021      	movs	r1, r4
 8001862:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001866:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001868:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800186e:	f7ff fe2d 	bl	80014cc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001872:	b013      	add	sp, #76	; 0x4c
 8001874:	bd30      	pop	{r4, r5, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40007000 	.word	0x40007000
 800187c:	ffffe7ff 	.word	0xffffe7ff

08001880 <main>:
{
 8001880:	b510      	push	{r4, lr}
  HAL_Init();
 8001882:	f7fe ffbb 	bl	80007fc <HAL_Init>
  SystemClock_Config();
 8001886:	f7ff ffcb 	bl	8001820 <SystemClock_Config>
  MX_GPIO_Init();
 800188a:	f7ff ff43 	bl	8001714 <MX_GPIO_Init>
  MX_ADC_Init();
 800188e:	f7ff fed5 	bl	800163c <MX_ADC_Init>
  main_Init();
 8001892:	f000 f877 	bl	8001984 <main_Init>
	  main_WhileLoop();
 8001896:	f000 f89b 	bl	80019d0 <main_WhileLoop>
 800189a:	e7fc      	b.n	8001896 <main+0x16>

0800189c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a0:	2201      	movs	r2, #1
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_MspInit+0x18>)
 80018a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018ae:	0552      	lsls	r2, r2, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b4:	4770      	bx	lr
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40021000 	.word	0x40021000

080018bc <NMI_Handler>:
 80018bc:	4770      	bx	lr

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	e7fe      	b.n	80018be <HardFault_Handler>

080018c0 <SVC_Handler>:
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c6:	f7fe ffad 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ca:	bd10      	pop	{r4, pc}

080018cc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <SystemInit+0x44>)
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <SystemInit+0x48>)
 80018dc:	400a      	ands	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	490d      	ldr	r1, [pc, #52]	; (8001918 <SystemInit+0x4c>)
 80018e4:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018e6:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80018e8:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	438a      	bics	r2, r1
 80018ee:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <SystemInit+0x50>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	4909      	ldr	r1, [pc, #36]	; (8001920 <SystemInit+0x54>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <SystemInit+0x58>)
 8001908:	0512      	lsls	r2, r2, #20
 800190a:	609a      	str	r2, [r3, #8]
#endif
}
 800190c:	4770      	bx	lr
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	88ff400c 	.word	0x88ff400c
 8001918:	fef6fff6 	.word	0xfef6fff6
 800191c:	fffbffff 	.word	0xfffbffff
 8001920:	ff02ffff 	.word	0xff02ffff
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <readBatteryVoltage>:
* STEP 2: Wait for ADC read to complete \n
* STEP 3: On completion success read ADC Digital Value and compute battery voltage on Fail stop and reset the ADC \n
* STEP 4: Return the battery voltage \n
* **************************************************************************************************** */
float readBatteryVoltage(void)
{
 8001928:	b570      	push	{r4, r5, r6, lr}
	float BatteryVoltageDivided;
	HAL_StatusTypeDef ADC_Status;

	// STEP 1:
	// Start ADC read
	HAL_ADC_Start(&hadc);
 800192a:	4c13      	ldr	r4, [pc, #76]	; (8001978 <readBatteryVoltage+0x50>)
 800192c:	0020      	movs	r0, r4
 800192e:	f7ff f905 	bl	8000b3c <HAL_ADC_Start>

	// STEP 2:
	// Wait for ADC read to complete
	ADC_Status = HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001932:	2101      	movs	r1, #1
 8001934:	0020      	movs	r0, r4
 8001936:	4249      	negs	r1, r1
 8001938:	f7ff f94a 	bl	8000bd0 <HAL_ADC_PollForConversion>

	// STEP 3:
	// On completion success read ADC Digital Value and compute battery voltage on Fail stop and reset the ADC
	if (ADC_Status != HAL_OK)
 800193c:	2800      	cmp	r0, #0
 800193e:	d006      	beq.n	800194e <readBatteryVoltage+0x26>
	{
	  HAL_ADC_Stop(&hadc);
 8001940:	0020      	movs	r0, r4
 8001942:	f7ff f927 	bl	8000b94 <HAL_ADC_Stop>
	  MX_ADC_Init();
 8001946:	f7ff fe79 	bl	800163c <MX_ADC_Init>
	float BatteryVoltage = 0.0;
 800194a:	2000      	movs	r0, #0

	// STEP 4:
	// Return the battery voltage
	return(BatteryVoltage);
	// TODO: On read fail do you want to return anything different
}
 800194c:	bd70      	pop	{r4, r5, r6, pc}
	  ADC_DigitalRead = HAL_ADC_GetValue(&hadc);
 800194e:	0020      	movs	r0, r4
 8001950:	f7ff f99c 	bl	8000c8c <HAL_ADC_GetValue>
	  BatteryVoltageDivided = (SuperStarStatus.ADC_VDDA_Vref / ADC_FULL_SCALE_VALUE) * ADC_DigitalRead;
 8001954:	4d09      	ldr	r5, [pc, #36]	; (800197c <readBatteryVoltage+0x54>)
	  ADC_DigitalRead = HAL_ADC_GetValue(&hadc);
 8001956:	0004      	movs	r4, r0
	  BatteryVoltageDivided = (SuperStarStatus.ADC_VDDA_Vref / ADC_FULL_SCALE_VALUE) * ADC_DigitalRead;
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <readBatteryVoltage+0x58>)
 800195a:	68e8      	ldr	r0, [r5, #12]
 800195c:	f7fe fc60 	bl	8000220 <__aeabi_fdiv>
 8001960:	1c06      	adds	r6, r0, #0
 8001962:	b2a0      	uxth	r0, r4
 8001964:	f7fe fec4 	bl	80006f0 <__aeabi_i2f>
 8001968:	1c01      	adds	r1, r0, #0
 800196a:	1c30      	adds	r0, r6, #0
 800196c:	f7fe fda0 	bl	80004b0 <__aeabi_fmul>
	  BatteryVoltage = BatteryVoltageDivided / SuperStarStatus.ADC_DividerRatio;
 8001970:	68a9      	ldr	r1, [r5, #8]
 8001972:	f7fe fc55 	bl	8000220 <__aeabi_fdiv>
	return(BatteryVoltage);
 8001976:	e7e9      	b.n	800194c <readBatteryVoltage+0x24>
 8001978:	20000024 	.word	0x20000024
 800197c:	20000080 	.word	0x20000080
 8001980:	447fc000 	.word	0x447fc000

08001984 <main_Init>:
*
* STEP 1: Perform the ADC Calibration
* STEP 2: Load SuperStart Settings from memory
* **************************************************************************************************** */
void main_Init(void)
{
 8001984:	b570      	push	{r4, r5, r6, lr}
	writeFloatNVM(MEMORY_OFFSET_DIVIDER_RATIO, 0.3638);
#endif

	// STEP :
	// Perform the ADC Calibration
	while(HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK);
 8001986:	2100      	movs	r1, #0
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <main_Init+0x3c>)
 800198a:	f7ff f9c3 	bl	8000d14 <HAL_ADCEx_Calibration_Start>
 800198e:	1e05      	subs	r5, r0, #0
 8001990:	d1f9      	bne.n	8001986 <main_Init+0x2>

	// STEP :
	// Load SuperStart Settings from memorySTEP 2: Load SuperStart Settings from memory
	uint8_t ADC_CalibrationCode;
	ADC_CalibrationCode = readByteNVM(MEMORY_OFFSET_ADC_CALIBRATION_PROGRAMED);
 8001992:	2001      	movs	r0, #1
 8001994:	f000 f91a 	bl	8001bcc <readByteNVM>
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <main_Init+0x40>)
	if (ADC_CalibrationCode == ADC_CALIBRATION_INSTALLED)
 800199a:	28c1      	cmp	r0, #193	; 0xc1
 800199c:	d10a      	bne.n	80019b4 <main_Init+0x30>
	{
		SuperStarStatus.InitTest.ADC_CalValuesLoaded = true;
 800199e:	2301      	movs	r3, #1
		SuperStarStatus.ADC_DividerRatio = readFloatNVM(MEMORY_OFFSET_DIVIDER_RATIO);
 80019a0:	38b6      	subs	r0, #182	; 0xb6
		SuperStarStatus.InitTest.ADC_CalValuesLoaded = true;
 80019a2:	7023      	strb	r3, [r4, #0]
		SuperStarStatus.ADC_DividerRatio = readFloatNVM(MEMORY_OFFSET_DIVIDER_RATIO);
 80019a4:	f000 f91c 	bl	8001be0 <readFloatNVM>
 80019a8:	60a0      	str	r0, [r4, #8]
		SuperStarStatus.ADC_VDDA_Vref = readFloatNVM(MEMORY_OFFSET_ADC_VDDA_VREF);
 80019aa:	2007      	movs	r0, #7
 80019ac:	f000 f918 	bl	8001be0 <readFloatNVM>
 80019b0:	60e0      	str	r0, [r4, #12]
		SuperStarStatus.ADC_DividerRatio = DEFAULT_VOLTAGE_DIVIDER_RATIO;
		SuperStarStatus.ADC_VDDA_Vref = DEFAULT_VOLTAGE_VDDA_REFERENCE;
	}
	/* TODO: Trinks add code to see if zero offset is loaded if not load the default */

} // END OF FUNCTION init_main
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
		SuperStarStatus.ADC_DividerRatio = DEFAULT_VOLTAGE_DIVIDER_RATIO;
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <main_Init+0x44>)
		SuperStarStatus.InitTest.ADC_CalValuesLoaded = false;
 80019b6:	7025      	strb	r5, [r4, #0]
		SuperStarStatus.ADC_DividerRatio = DEFAULT_VOLTAGE_DIVIDER_RATIO;
 80019b8:	60a3      	str	r3, [r4, #8]
		SuperStarStatus.ADC_VDDA_Vref = DEFAULT_VOLTAGE_VDDA_REFERENCE;
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <main_Init+0x48>)
 80019bc:	60e3      	str	r3, [r4, #12]
} // END OF FUNCTION init_main
 80019be:	e7f8      	b.n	80019b2 <main_Init+0x2e>
 80019c0:	20000024 	.word	0x20000024
 80019c4:	20000080 	.word	0x20000080
 80019c8:	3ebb207d 	.word	0x3ebb207d
 80019cc:	40533333 	.word	0x40533333

080019d0 <main_WhileLoop>:
*
* STEP 1:
* STEP 2:
* **************************************************************************************************** */
void main_WhileLoop(void)
{
 80019d0:	b513      	push	{r0, r1, r4, lr}

	float PresentBatteryVoltage;

	PresentBatteryVoltage = readBatteryVoltage();

	volatile uint32_t DummyVar = 0;
 80019d2:	2400      	movs	r4, #0
	PresentBatteryVoltage = readBatteryVoltage();
 80019d4:	f7ff ffa8 	bl	8001928 <readBatteryVoltage>
	volatile uint32_t FullCount = 400000;
 80019d8:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <main_WhileLoop+0x1ec>)

	// LED TESING:
	HAL_GPIO_WritePin(Sens_Trig_GPIO_Port, Sens_Trig_Pin, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2102      	movs	r1, #2
 80019de:	4878      	ldr	r0, [pc, #480]	; (8001bc0 <main_WhileLoop+0x1f0>)
	volatile uint32_t DummyVar = 0;
 80019e0:	9400      	str	r4, [sp, #0]
	volatile uint32_t FullCount = 400000;
 80019e2:	9301      	str	r3, [sp, #4]
	HAL_GPIO_WritePin(Sens_Trig_GPIO_Port, Sens_Trig_Pin, GPIO_PIN_SET);
 80019e4:	f7ff fade 	bl	8000fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Sens_Echo_GPIO_Port, Sens_Echo_Pin, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	4875      	ldr	r0, [pc, #468]	; (8001bc0 <main_WhileLoop+0x1f0>)
 80019ec:	0011      	movs	r1, r2
 80019ee:	f7ff fad9 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED1();
 80019f2:	20a0      	movs	r0, #160	; 0xa0
 80019f4:	2201      	movs	r2, #1
 80019f6:	2102      	movs	r1, #2
 80019f8:	05c0      	lsls	r0, r0, #23
 80019fa:	f7ff fad3 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED2();
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	2201      	movs	r2, #1
 8001a02:	0209      	lsls	r1, r1, #8
 8001a04:	486f      	ldr	r0, [pc, #444]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001a06:	f7ff facd 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED3();
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	0189      	lsls	r1, r1, #6
 8001a10:	486c      	ldr	r0, [pc, #432]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001a12:	f7ff fac7 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED4();
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	20a0      	movs	r0, #160	; 0xa0
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	0149      	lsls	r1, r1, #5
 8001a1e:	05c0      	lsls	r0, r0, #23
 8001a20:	f7ff fac0 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED5();
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	20a0      	movs	r0, #160	; 0xa0
 8001a28:	2201      	movs	r2, #1
 8001a2a:	0109      	lsls	r1, r1, #4
 8001a2c:	05c0      	lsls	r0, r0, #23
 8001a2e:	f7ff fab9 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED6();
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	2201      	movs	r2, #1
 8001a36:	0209      	lsls	r1, r1, #8
 8001a38:	4863      	ldr	r0, [pc, #396]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001a3a:	f7ff fab3 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED7();
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	2201      	movs	r2, #1
 8001a42:	0189      	lsls	r1, r1, #6
 8001a44:	4860      	ldr	r0, [pc, #384]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001a46:	f7ff faad 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_RLED8();
 8001a4a:	2180      	movs	r1, #128	; 0x80
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	0149      	lsls	r1, r1, #5
 8001a50:	485d      	ldr	r0, [pc, #372]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001a52:	f7ff faa7 	bl	8000fa4 <HAL_GPIO_WritePin>
	//ALL RED SHOULD BE ON//
	for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 8001a56:	9a01      	ldr	r2, [sp, #4]
 8001a58:	4294      	cmp	r4, r2
 8001a5a:	d200      	bcs.n	8001a5e <main_WhileLoop+0x8e>
 8001a5c:	e0a4      	b.n	8001ba8 <main_WhileLoop+0x1d8>
	  {
		  DummyVar++;
	  }
	HAL_GPIO_WritePin(Sens_Trig_GPIO_Port, Sens_Trig_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2102      	movs	r1, #2
 8001a62:	4857      	ldr	r0, [pc, #348]	; (8001bc0 <main_WhileLoop+0x1f0>)
 8001a64:	f7ff fa9e 	bl	8000fa4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Sens_Echo_GPIO_Port, Sens_Echo_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4854      	ldr	r0, [pc, #336]	; (8001bc0 <main_WhileLoop+0x1f0>)
 8001a6e:	f7ff fa99 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED1();
 8001a72:	20a0      	movs	r0, #160	; 0xa0
 8001a74:	2200      	movs	r2, #0
 8001a76:	2102      	movs	r1, #2
 8001a78:	05c0      	lsls	r0, r0, #23
 8001a7a:	f7ff fa93 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED2();
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	2200      	movs	r2, #0
 8001a82:	0209      	lsls	r1, r1, #8
 8001a84:	484f      	ldr	r0, [pc, #316]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001a86:	f7ff fa8d 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED3();
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	0189      	lsls	r1, r1, #6
 8001a90:	484c      	ldr	r0, [pc, #304]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001a92:	f7ff fa87 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED4();
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	20a0      	movs	r0, #160	; 0xa0
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	0149      	lsls	r1, r1, #5
 8001a9e:	05c0      	lsls	r0, r0, #23
 8001aa0:	f7ff fa80 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED5();
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	20a0      	movs	r0, #160	; 0xa0
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0109      	lsls	r1, r1, #4
 8001aac:	05c0      	lsls	r0, r0, #23
 8001aae:	f7ff fa79 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED6();
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	0209      	lsls	r1, r1, #8
 8001ab8:	4843      	ldr	r0, [pc, #268]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001aba:	f7ff fa73 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED7();
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	0189      	lsls	r1, r1, #6
 8001ac4:	4840      	ldr	r0, [pc, #256]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001ac6:	f7ff fa6d 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_RLED8();
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	2200      	movs	r2, #0
 8001ace:	0149      	lsls	r1, r1, #5
 8001ad0:	483d      	ldr	r0, [pc, #244]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001ad2:	f7ff fa67 	bl	8000fa4 <HAL_GPIO_WritePin>
	//ALL RED LEDs SHOULD BE OFF//

	//NEXT COLOR//
	ON_GLED1();
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	20a0      	movs	r0, #160	; 0xa0
 8001ada:	0011      	movs	r1, r2
 8001adc:	05c0      	lsls	r0, r0, #23
 8001ade:	f7ff fa61 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED2();
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	01c9      	lsls	r1, r1, #7
 8001ae8:	4836      	ldr	r0, [pc, #216]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001aea:	f7ff fa5b 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED3();
 8001aee:	2201      	movs	r2, #1
 8001af0:	4834      	ldr	r0, [pc, #208]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001af2:	0011      	movs	r1, r2
 8001af4:	f7ff fa56 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED4();
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	20a0      	movs	r0, #160	; 0xa0
 8001afc:	2201      	movs	r2, #1
 8001afe:	0209      	lsls	r1, r1, #8
 8001b00:	05c0      	lsls	r0, r0, #23
 8001b02:	f7ff fa4f 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED5();
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	20a0      	movs	r0, #160	; 0xa0
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	0089      	lsls	r1, r1, #2
 8001b0e:	05c0      	lsls	r0, r0, #23
 8001b10:	f7ff fa48 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED6();
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	20a0      	movs	r0, #160	; 0xa0
 8001b18:	2201      	movs	r2, #1
 8001b1a:	0049      	lsls	r1, r1, #1
 8001b1c:	05c0      	lsls	r0, r0, #23
 8001b1e:	f7ff fa41 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED7();
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	2201      	movs	r2, #1
 8001b26:	01c9      	lsls	r1, r1, #7
 8001b28:	4827      	ldr	r0, [pc, #156]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001b2a:	f7ff fa3b 	bl	8000fa4 <HAL_GPIO_WritePin>
	ON_GLED8();
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	2201      	movs	r2, #1
 8001b32:	00c9      	lsls	r1, r1, #3
 8001b34:	4824      	ldr	r0, [pc, #144]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001b36:	f7ff fa35 	bl	8000fa4 <HAL_GPIO_WritePin>

	for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9a01      	ldr	r2, [sp, #4]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d337      	bcc.n	8001bb2 <main_WhileLoop+0x1e2>
		  {
			  DummyVar++;
		  }

	OFF_GLED1();
 8001b42:	20a0      	movs	r0, #160	; 0xa0
 8001b44:	2200      	movs	r2, #0
 8001b46:	2101      	movs	r1, #1
 8001b48:	05c0      	lsls	r0, r0, #23
 8001b4a:	f7ff fa2b 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED2();
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	2200      	movs	r2, #0
 8001b52:	01c9      	lsls	r1, r1, #7
 8001b54:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001b56:	f7ff fa25 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED3();
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	4819      	ldr	r0, [pc, #100]	; (8001bc4 <main_WhileLoop+0x1f4>)
 8001b60:	f7ff fa20 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED4();
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	20a0      	movs	r0, #160	; 0xa0
 8001b68:	2200      	movs	r2, #0
 8001b6a:	0209      	lsls	r1, r1, #8
 8001b6c:	05c0      	lsls	r0, r0, #23
 8001b6e:	f7ff fa19 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED5();
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	20a0      	movs	r0, #160	; 0xa0
 8001b76:	2200      	movs	r2, #0
 8001b78:	0089      	lsls	r1, r1, #2
 8001b7a:	05c0      	lsls	r0, r0, #23
 8001b7c:	f7ff fa12 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED6();
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	20a0      	movs	r0, #160	; 0xa0
 8001b84:	2200      	movs	r2, #0
 8001b86:	0049      	lsls	r1, r1, #1
 8001b88:	05c0      	lsls	r0, r0, #23
 8001b8a:	f7ff fa0b 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED7();
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	2200      	movs	r2, #0
 8001b92:	01c9      	lsls	r1, r1, #7
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001b96:	f7ff fa05 	bl	8000fa4 <HAL_GPIO_WritePin>
	OFF_GLED8();
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	00c9      	lsls	r1, r1, #3
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <main_WhileLoop+0x1f8>)
 8001ba2:	f7ff f9ff 	bl	8000fa4 <HAL_GPIO_WritePin>
	//ALL GREEN LEDs SHOULD BE OFF//


} // END OF FUNCTION init_main
 8001ba6:	bd13      	pop	{r0, r1, r4, pc}
		  DummyVar++;
 8001ba8:	9a00      	ldr	r2, [sp, #0]
	for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 8001baa:	3401      	adds	r4, #1
		  DummyVar++;
 8001bac:	3201      	adds	r2, #1
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	e751      	b.n	8001a56 <main_WhileLoop+0x86>
			  DummyVar++;
 8001bb2:	9a00      	ldr	r2, [sp, #0]
	for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 8001bb4:	3301      	adds	r3, #1
			  DummyVar++;
 8001bb6:	3201      	adds	r2, #1
 8001bb8:	9200      	str	r2, [sp, #0]
 8001bba:	e7bf      	b.n	8001b3c <main_WhileLoop+0x16c>
 8001bbc:	00061a80 	.word	0x00061a80
 8001bc0:	50001c00 	.word	0x50001c00
 8001bc4:	50000800 	.word	0x50000800
 8001bc8:	50000400 	.word	0x50000400

08001bcc <readByteNVM>:
uint8_t readByteNVM(uint32_t NVM_AddressOffset)
{

	// STEP 1:
	// Check for valid offset
	if ((NVM_AddressOffset == 0) || (NVM_AddressOffset > SIZE_OF_DATA_EEPROM))
 8001bcc:	1e42      	subs	r2, r0, #1
		return(false);
 8001bce:	2300      	movs	r3, #0
	if ((NVM_AddressOffset == 0) || (NVM_AddressOffset > SIZE_OF_DATA_EEPROM))
 8001bd0:	2aff      	cmp	r2, #255	; 0xff
 8001bd2:	d801      	bhi.n	8001bd8 <readByteNVM+0xc>

	// STEP 2:
	// Read and return
	return(*(uint8_t *)(BASE_DATA_EEPROM_ADDRESS + NVM_AddressOffset));
 8001bd4:	4b01      	ldr	r3, [pc, #4]	; (8001bdc <readByteNVM+0x10>)
 8001bd6:	5cc3      	ldrb	r3, [r0, r3]

} // END OF readByteNVM
 8001bd8:	0018      	movs	r0, r3
 8001bda:	4770      	bx	lr
 8001bdc:	08080000 	.word	0x08080000

08001be0 <readFloatNVM>:
	uint32_t AddressOffsetPointer;
	Type_FloatAsByteArray FloatNumber;

	// STEP 1:
	// Check for valid offset
	if ((NVM_AddressOffset == 0) || (NVM_AddressOffset > SIZE_OF_DATA_EEPROM))
 8001be0:	1e43      	subs	r3, r0, #1
{
 8001be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001be4:	0005      	movs	r5, r0
		return(false);
 8001be6:	2000      	movs	r0, #0
	if ((NVM_AddressOffset == 0) || (NVM_AddressOffset > SIZE_OF_DATA_EEPROM))
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d809      	bhi.n	8001c00 <readFloatNVM+0x20>
 8001bec:	2400      	movs	r4, #0
	// STEP 2:
	// Read NVM and return
	for (uint8_t ByteIndex = 0; ByteIndex < sizeof(float); ByteIndex++)
	{
		AddressOffsetPointer = NVM_AddressOffset + ByteIndex;
		FloatNumber.Byte[ByteIndex] = readByteNVM(AddressOffsetPointer);
 8001bee:	ae01      	add	r6, sp, #4
 8001bf0:	1960      	adds	r0, r4, r5
 8001bf2:	f7ff ffeb 	bl	8001bcc <readByteNVM>
 8001bf6:	55a0      	strb	r0, [r4, r6]
 8001bf8:	3401      	adds	r4, #1
	for (uint8_t ByteIndex = 0; ByteIndex < sizeof(float); ByteIndex++)
 8001bfa:	2c04      	cmp	r4, #4
 8001bfc:	d1f8      	bne.n	8001bf0 <readFloatNVM+0x10>
	}
	return(FloatNumber.Float);
 8001bfe:	9801      	ldr	r0, [sp, #4]

} // END OF readFloatNVM
 8001c00:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08001c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001c04:	4813      	ldr	r0, [pc, #76]	; (8001c54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001c06:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001c08:	2004      	movs	r0, #4
    LDR R1, [R0]
 8001c0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001c0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001c0e:	221f      	movs	r2, #31
    CMP R1, R2
 8001c10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001c12:	d105      	bne.n	8001c20 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001c14:	4810      	ldr	r0, [pc, #64]	; (8001c58 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8001c16:	2101      	movs	r1, #1
    STR R1, [R0]
 8001c18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001c1a:	4810      	ldr	r0, [pc, #64]	; (8001c5c <LoopForever+0xa>)
    LDR R1,=0x00000000
 8001c1c:	2100      	movs	r1, #0
    STR R1, [R0]
 8001c1e:	6001      	str	r1, [r0, #0]

08001c20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c22:	e003      	b.n	8001c2c <LoopCopyDataInit>

08001c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 8001c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c2a:	3104      	adds	r1, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <LoopForever+0x12>)
  ldr  r3, =_edata
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <LoopForever+0x16>)
  adds  r2, r0, r1
 8001c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c34:	d3f6      	bcc.n	8001c24 <CopyDataInit>
  ldr  r2, =_sbss
 8001c36:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <LoopForever+0x1a>)
  b  LoopFillZerobss
 8001c38:	e002      	b.n	8001c40 <LoopFillZerobss>

08001c3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001c3a:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c3c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3e:	3204      	adds	r2, #4

08001c40 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <LoopForever+0x1e>)
  cmp  r2, r3
 8001c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c44:	d3f9      	bcc.n	8001c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c46:	f7ff fe41 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f000 f815 	bl	8001c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff fe17 	bl	8001880 <main>

08001c52 <LoopForever>:

LoopForever:
    b LoopForever
 8001c52:	e7fe      	b.n	8001c52 <LoopForever>
   ldr   r0, =_estack
 8001c54:	20002000 	.word	0x20002000
    LDR R0,=0x40021034
 8001c58:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 8001c5c:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 8001c60:	08001dcc 	.word	0x08001dcc
  ldr  r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c68:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001c6c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001c70:	20000090 	.word	0x20000090

08001c74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_IRQHandler>
	...

08001c78 <__libc_init_array>:
 8001c78:	b570      	push	{r4, r5, r6, lr}
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	4d0c      	ldr	r5, [pc, #48]	; (8001cb0 <__libc_init_array+0x38>)
 8001c7e:	4c0d      	ldr	r4, [pc, #52]	; (8001cb4 <__libc_init_array+0x3c>)
 8001c80:	1b64      	subs	r4, r4, r5
 8001c82:	10a4      	asrs	r4, r4, #2
 8001c84:	42a6      	cmp	r6, r4
 8001c86:	d109      	bne.n	8001c9c <__libc_init_array+0x24>
 8001c88:	2600      	movs	r6, #0
 8001c8a:	f000 f821 	bl	8001cd0 <_init>
 8001c8e:	4d0a      	ldr	r5, [pc, #40]	; (8001cb8 <__libc_init_array+0x40>)
 8001c90:	4c0a      	ldr	r4, [pc, #40]	; (8001cbc <__libc_init_array+0x44>)
 8001c92:	1b64      	subs	r4, r4, r5
 8001c94:	10a4      	asrs	r4, r4, #2
 8001c96:	42a6      	cmp	r6, r4
 8001c98:	d105      	bne.n	8001ca6 <__libc_init_array+0x2e>
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
 8001c9c:	00b3      	lsls	r3, r6, #2
 8001c9e:	58eb      	ldr	r3, [r5, r3]
 8001ca0:	4798      	blx	r3
 8001ca2:	3601      	adds	r6, #1
 8001ca4:	e7ee      	b.n	8001c84 <__libc_init_array+0xc>
 8001ca6:	00b3      	lsls	r3, r6, #2
 8001ca8:	58eb      	ldr	r3, [r5, r3]
 8001caa:	4798      	blx	r3
 8001cac:	3601      	adds	r6, #1
 8001cae:	e7f2      	b.n	8001c96 <__libc_init_array+0x1e>
 8001cb0:	08001dc4 	.word	0x08001dc4
 8001cb4:	08001dc4 	.word	0x08001dc4
 8001cb8:	08001dc4 	.word	0x08001dc4
 8001cbc:	08001dc8 	.word	0x08001dc8

08001cc0 <memset>:
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	1882      	adds	r2, r0, r2
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d100      	bne.n	8001cca <memset+0xa>
 8001cc8:	4770      	bx	lr
 8001cca:	7019      	strb	r1, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	e7f9      	b.n	8001cc4 <memset+0x4>

08001cd0 <_init>:
 8001cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cd6:	bc08      	pop	{r3}
 8001cd8:	469e      	mov	lr, r3
 8001cda:	4770      	bx	lr

08001cdc <_fini>:
 8001cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce2:	bc08      	pop	{r3}
 8001ce4:	469e      	mov	lr, r3
 8001ce6:	4770      	bx	lr
