
SuperStar1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080012b8  080012b8  000112b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080012dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  20000004  080012e0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000080  080012e0  00020080  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005676  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000145c  00000000  00000000  000256a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000196f  00000000  00000000  00026afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000430  00000000  00000000  00028470  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000560  00000000  00000000  000288a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000026ef  00000000  00000000  00028e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001691  00000000  00000000  0002b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002cb80  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000009c0  00000000  00000000  0002cbfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080012a0 	.word	0x080012a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080012a0 	.word	0x080012a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000220:	21fa      	movs	r1, #250	; 0xfa
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <HAL_InitTick+0x2c>)
{
 8000224:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000226:	0089      	lsls	r1, r1, #2
{
 8000228:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f978 	bl	8000524 <HAL_SYSTICK_Config>
 8000234:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000236:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000238:	2c00      	cmp	r4, #0
 800023a:	d105      	bne.n	8000248 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800023c:	3802      	subs	r0, #2
 800023e:	0022      	movs	r2, r4
 8000240:	0029      	movs	r1, r5
 8000242:	f000 f93f 	bl	80004c4 <HAL_NVIC_SetPriority>
 8000246:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000248:	bd70      	pop	{r4, r5, r6, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000000 	.word	0x20000000

08000250 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000250:	2340      	movs	r3, #64	; 0x40
 8000252:	4a08      	ldr	r2, [pc, #32]	; (8000274 <HAL_Init+0x24>)
{
 8000254:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000256:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000258:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800025a:	430b      	orrs	r3, r1
 800025c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800025e:	f7ff ffdf 	bl	8000220 <HAL_InitTick>
 8000262:	1e04      	subs	r4, r0, #0
 8000264:	d103      	bne.n	800026e <HAL_Init+0x1e>
    HAL_MspInit();
 8000266:	f000 ff71 	bl	800114c <HAL_MspInit>
}
 800026a:	0020      	movs	r0, r4
 800026c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800026e:	2401      	movs	r4, #1
 8000270:	e7fb      	b.n	800026a <HAL_Init+0x1a>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000020 	.word	0x20000020

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0004      	movs	r4, r0
 
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8000298:	2001      	movs	r0, #1
  if(hadc == NULL)
 800029a:	2c00      	cmp	r4, #0
 800029c:	d019      	beq.n	80002d2 <HAL_ADC_Init+0x3e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800029e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d106      	bne.n	80002b2 <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002a4:	0022      	movs	r2, r4
 80002a6:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80002a8:	65a3      	str	r3, [r4, #88]	; 0x58
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002aa:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80002ac:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80002ae:	f000 fd8d 	bl	8000dcc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80002b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80002b4:	06db      	lsls	r3, r3, #27
 80002b6:	d404      	bmi.n	80002c2 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80002b8:	2204      	movs	r2, #4
 80002ba:	6823      	ldr	r3, [r4, #0]
 80002bc:	6898      	ldr	r0, [r3, #8]
 80002be:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80002c0:	d008      	beq.n	80002d4 <HAL_ADC_Init+0x40>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002c2:	2310      	movs	r3, #16
 80002c4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
 80002c6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002c8:	4313      	orrs	r3, r2
 80002ca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80002cc:	2300      	movs	r3, #0
 80002ce:	3450      	adds	r4, #80	; 0x50
 80002d0:	7023      	strb	r3, [r4, #0]
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
}
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80002d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80002d6:	4955      	ldr	r1, [pc, #340]	; (800042c <HAL_ADC_Init+0x198>)
 80002d8:	4011      	ands	r1, r2
 80002da:	2202      	movs	r2, #2
 80002dc:	430a      	orrs	r2, r1
 80002de:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002e0:	2203      	movs	r2, #3
 80002e2:	6899      	ldr	r1, [r3, #8]
 80002e4:	4011      	ands	r1, r2
 80002e6:	4a52      	ldr	r2, [pc, #328]	; (8000430 <HAL_ADC_Init+0x19c>)
 80002e8:	2901      	cmp	r1, #1
 80002ea:	d102      	bne.n	80002f2 <HAL_ADC_Init+0x5e>
 80002ec:	681d      	ldr	r5, [r3, #0]
 80002ee:	420d      	tst	r5, r1
 80002f0:	d119      	bne.n	8000326 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80002f2:	2680      	movs	r6, #128	; 0x80
 80002f4:	6865      	ldr	r5, [r4, #4]
 80002f6:	05f6      	lsls	r6, r6, #23
 80002f8:	0069      	lsls	r1, r5, #1
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	42b1      	cmp	r1, r6
 80002fe:	d003      	beq.n	8000308 <HAL_ADC_Init+0x74>
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0609      	lsls	r1, r1, #24
 8000304:	428d      	cmp	r5, r1
 8000306:	d176      	bne.n	80003f6 <HAL_ADC_Init+0x162>
 8000308:	6919      	ldr	r1, [r3, #16]
 800030a:	0089      	lsls	r1, r1, #2
 800030c:	0889      	lsrs	r1, r1, #2
 800030e:	6119      	str	r1, [r3, #16]
 8000310:	6919      	ldr	r1, [r3, #16]
 8000312:	430d      	orrs	r5, r1
 8000314:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000316:	2518      	movs	r5, #24
 8000318:	68d9      	ldr	r1, [r3, #12]
 800031a:	43a9      	bics	r1, r5
 800031c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800031e:	68d9      	ldr	r1, [r3, #12]
 8000320:	68a5      	ldr	r5, [r4, #8]
 8000322:	4329      	orrs	r1, r5
 8000324:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000326:	6811      	ldr	r1, [r2, #0]
 8000328:	4d42      	ldr	r5, [pc, #264]	; (8000434 <HAL_ADC_Init+0x1a0>)
 800032a:	4029      	ands	r1, r5
 800032c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800032e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000330:	6815      	ldr	r5, [r2, #0]
 8000332:	0649      	lsls	r1, r1, #25
 8000334:	4329      	orrs	r1, r5
 8000336:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000338:	2280      	movs	r2, #128	; 0x80
 800033a:	6899      	ldr	r1, [r3, #8]
 800033c:	0552      	lsls	r2, r2, #21
 800033e:	4211      	tst	r1, r2
 8000340:	d102      	bne.n	8000348 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000342:	6899      	ldr	r1, [r3, #8]
 8000344:	430a      	orrs	r2, r1
 8000346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000348:	68da      	ldr	r2, [r3, #12]
 800034a:	493b      	ldr	r1, [pc, #236]	; (8000438 <HAL_ADC_Init+0x1a4>)
 800034c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800034e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000350:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000352:	68dd      	ldr	r5, [r3, #12]
 8000354:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000356:	2902      	cmp	r1, #2
 8000358:	d100      	bne.n	800035c <HAL_ADC_Init+0xc8>
 800035a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800035c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800035e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000360:	4332      	orrs	r2, r6
 8000362:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000364:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000366:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000368:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800036a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800036c:	69e5      	ldr	r5, [r4, #28]
 800036e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000370:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000372:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000374:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000376:	0025      	movs	r5, r4
 8000378:	352c      	adds	r5, #44	; 0x2c
 800037a:	782d      	ldrb	r5, [r5, #0]
 800037c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800037e:	432a      	orrs	r2, r5
 8000380:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000382:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000384:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000386:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000388:	30ff      	adds	r0, #255	; 0xff
 800038a:	4282      	cmp	r2, r0
 800038c:	d004      	beq.n	8000398 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800038e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000390:	68d8      	ldr	r0, [r3, #12]
 8000392:	432a      	orrs	r2, r5
 8000394:	4302      	orrs	r2, r0
 8000396:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000398:	1ca2      	adds	r2, r4, #2
 800039a:	7fd2      	ldrb	r2, [r2, #31]
 800039c:	2a01      	cmp	r2, #1
 800039e:	d106      	bne.n	80003ae <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d134      	bne.n	800040e <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	68d9      	ldr	r1, [r3, #12]
 80003a8:	0252      	lsls	r2, r2, #9
 80003aa:	430a      	orrs	r2, r1
 80003ac:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80003ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80003b0:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80003b2:	2901      	cmp	r1, #1
 80003b4:	d133      	bne.n	800041e <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80003b6:	4821      	ldr	r0, [pc, #132]	; (800043c <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80003b8:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80003ba:	4002      	ands	r2, r0
 80003bc:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80003be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80003c0:	6918      	ldr	r0, [r3, #16]
 80003c2:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80003c4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80003c6:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80003c8:	4302      	orrs	r2, r0
 80003ca:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80003cc:	691a      	ldr	r2, [r3, #16]
 80003ce:	4311      	orrs	r1, r2
 80003d0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80003d2:	2107      	movs	r1, #7
 80003d4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80003d6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80003d8:	438a      	bics	r2, r1
 80003da:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80003dc:	695a      	ldr	r2, [r3, #20]
 80003de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80003e4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80003e6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80003e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80003ea:	4393      	bics	r3, r2
 80003ec:	001a      	movs	r2, r3
 80003ee:	2301      	movs	r3, #1
 80003f0:	4313      	orrs	r3, r2
 80003f2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80003f4:	e76d      	b.n	80002d2 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80003f6:	6919      	ldr	r1, [r3, #16]
 80003f8:	4e11      	ldr	r6, [pc, #68]	; (8000440 <HAL_ADC_Init+0x1ac>)
 80003fa:	0089      	lsls	r1, r1, #2
 80003fc:	0889      	lsrs	r1, r1, #2
 80003fe:	6119      	str	r1, [r3, #16]
 8000400:	6811      	ldr	r1, [r2, #0]
 8000402:	4031      	ands	r1, r6
 8000404:	6011      	str	r1, [r2, #0]
 8000406:	6811      	ldr	r1, [r2, #0]
 8000408:	430d      	orrs	r5, r1
 800040a:	6015      	str	r5, [r2, #0]
 800040c:	e783      	b.n	8000316 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800040e:	2120      	movs	r1, #32
 8000410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000412:	4301      	orrs	r1, r0
 8000414:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000416:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000418:	430a      	orrs	r2, r1
 800041a:	65a2      	str	r2, [r4, #88]	; 0x58
 800041c:	e7c7      	b.n	80003ae <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800041e:	2101      	movs	r1, #1
 8000420:	420a      	tst	r2, r1
 8000422:	d0d6      	beq.n	80003d2 <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000424:	691a      	ldr	r2, [r3, #16]
 8000426:	438a      	bics	r2, r1
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	e7d2      	b.n	80003d2 <HAL_ADC_Init+0x13e>
 800042c:	fffffefd 	.word	0xfffffefd
 8000430:	40012708 	.word	0x40012708
 8000434:	fdffffff 	.word	0xfdffffff
 8000438:	fffe0219 	.word	0xfffe0219
 800043c:	fffffc03 	.word	0xfffffc03
 8000440:	ffc3ffff 	.word	0xffc3ffff

08000444 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000444:	b530      	push	{r4, r5, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000446:	0004      	movs	r4, r0
 8000448:	3450      	adds	r4, #80	; 0x50
 800044a:	7823      	ldrb	r3, [r4, #0]
{
 800044c:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800044e:	2002      	movs	r0, #2
 8000450:	2b01      	cmp	r3, #1
 8000452:	d00c      	beq.n	800046e <HAL_ADC_ConfigChannel+0x2a>
 8000454:	2301      	movs	r3, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000456:	682a      	ldr	r2, [r5, #0]
  __HAL_LOCK(hadc);
 8000458:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800045a:	6890      	ldr	r0, [r2, #8]
 800045c:	0740      	lsls	r0, r0, #29
 800045e:	d507      	bpl.n	8000470 <HAL_ADC_ConfigChannel+0x2c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000460:	2220      	movs	r2, #32
 8000462:	6d69      	ldr	r1, [r5, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
 8000464:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000466:	430a      	orrs	r2, r1
 8000468:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800046a:	2200      	movs	r2, #0
 800046c:	7022      	strb	r2, [r4, #0]
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	2080      	movs	r0, #128	; 0x80
  if (sConfig->Rank != ADC_RANK_NONE)
 8000472:	684d      	ldr	r5, [r1, #4]
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <HAL_ADC_ConfigChannel+0x74>)
 8000476:	6809      	ldr	r1, [r1, #0]
 8000478:	0280      	lsls	r0, r0, #10
 800047a:	429d      	cmp	r5, r3
 800047c:	d00f      	beq.n	800049e <HAL_ADC_ConfigChannel+0x5a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800047e:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8000480:	034b      	lsls	r3, r1, #13
 8000482:	0b5b      	lsrs	r3, r3, #13
 8000484:	432b      	orrs	r3, r5
 8000486:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000488:	4201      	tst	r1, r0
 800048a:	d005      	beq.n	8000498 <HAL_ADC_ConfigChannel+0x54>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <HAL_ADC_ConfigChannel+0x78>)
 8000490:	03db      	lsls	r3, r3, #15
 8000492:	6811      	ldr	r1, [r2, #0]
 8000494:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000496:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8000498:	2000      	movs	r0, #0
 800049a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800049c:	e7e7      	b.n	800046e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800049e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80004a0:	034d      	lsls	r5, r1, #13
 80004a2:	0b6d      	lsrs	r5, r5, #13
 80004a4:	43ab      	bics	r3, r5
 80004a6:	6293      	str	r3, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80004a8:	4201      	tst	r1, r0
 80004aa:	d0f5      	beq.n	8000498 <HAL_ADC_ConfigChannel+0x54>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80004ac:	4a03      	ldr	r2, [pc, #12]	; (80004bc <HAL_ADC_ConfigChannel+0x78>)
 80004ae:	4904      	ldr	r1, [pc, #16]	; (80004c0 <HAL_ADC_ConfigChannel+0x7c>)
 80004b0:	6813      	ldr	r3, [r2, #0]
 80004b2:	400b      	ands	r3, r1
 80004b4:	e7ef      	b.n	8000496 <HAL_ADC_ConfigChannel+0x52>
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	00001001 	.word	0x00001001
 80004bc:	40012708 	.word	0x40012708
 80004c0:	ffbfffff 	.word	0xffbfffff

080004c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004c8:	2800      	cmp	r0, #0
 80004ca:	da14      	bge.n	80004f6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004cc:	230f      	movs	r3, #15
 80004ce:	b2c0      	uxtb	r0, r0
 80004d0:	4003      	ands	r3, r0
 80004d2:	3b08      	subs	r3, #8
 80004d4:	4a11      	ldr	r2, [pc, #68]	; (800051c <HAL_NVIC_SetPriority+0x58>)
 80004d6:	089b      	lsrs	r3, r3, #2
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	189b      	adds	r3, r3, r2
 80004dc:	2203      	movs	r2, #3
 80004de:	4010      	ands	r0, r2
 80004e0:	4090      	lsls	r0, r2
 80004e2:	32fc      	adds	r2, #252	; 0xfc
 80004e4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ea:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ec:	69dc      	ldr	r4, [r3, #28]
 80004ee:	43ac      	bics	r4, r5
 80004f0:	4321      	orrs	r1, r4
 80004f2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f6:	2503      	movs	r5, #3
 80004f8:	0883      	lsrs	r3, r0, #2
 80004fa:	4028      	ands	r0, r5
 80004fc:	40a8      	lsls	r0, r5
 80004fe:	35fc      	adds	r5, #252	; 0xfc
 8000500:	002e      	movs	r6, r5
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_NVIC_SetPriority+0x5c>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	189b      	adds	r3, r3, r2
 8000508:	22c0      	movs	r2, #192	; 0xc0
 800050a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050c:	4029      	ands	r1, r5
 800050e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000510:	0092      	lsls	r2, r2, #2
 8000512:	589c      	ldr	r4, [r3, r2]
 8000514:	43b4      	bics	r4, r6
 8000516:	4321      	orrs	r1, r4
 8000518:	5099      	str	r1, [r3, r2]
 800051a:	e7eb      	b.n	80004f4 <HAL_NVIC_SetPriority+0x30>
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	e000e100 	.word	0xe000e100

08000524 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <HAL_SYSTICK_Config+0x28>)
 8000526:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000528:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800052a:	4293      	cmp	r3, r2
 800052c:	d80d      	bhi.n	800054a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000534:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000536:	6a03      	ldr	r3, [r0, #32]
 8000538:	0609      	lsls	r1, r1, #24
 800053a:	021b      	lsls	r3, r3, #8
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	430b      	orrs	r3, r1
 8000540:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000542:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000544:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000546:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000548:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800054a:	4770      	bx	lr
 800054c:	00ffffff 	.word	0x00ffffff
 8000550:	e000e010 	.word	0xe000e010
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800055a:	4a50      	ldr	r2, [pc, #320]	; (800069c <HAL_GPIO_Init+0x144>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800055c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800055e:	1882      	adds	r2, r0, r2
 8000560:	1e54      	subs	r4, r2, #1
 8000562:	41a2      	sbcs	r2, r4
{
 8000564:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000566:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000568:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800056a:	3205      	adds	r2, #5
 800056c:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800056e:	9a01      	ldr	r2, [sp, #4]
 8000570:	40da      	lsrs	r2, r3
 8000572:	d101      	bne.n	8000578 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000574:	b005      	add	sp, #20
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000578:	2501      	movs	r5, #1
 800057a:	409d      	lsls	r5, r3
 800057c:	9a01      	ldr	r2, [sp, #4]
 800057e:	402a      	ands	r2, r5
 8000580:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000582:	d100      	bne.n	8000586 <HAL_GPIO_Init+0x2e>
 8000584:	e088      	b.n	8000698 <HAL_GPIO_Init+0x140>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000586:	684a      	ldr	r2, [r1, #4]
 8000588:	4694      	mov	ip, r2
 800058a:	2210      	movs	r2, #16
 800058c:	4664      	mov	r4, ip
 800058e:	4394      	bics	r4, r2
 8000590:	0022      	movs	r2, r4
 8000592:	3c01      	subs	r4, #1
 8000594:	2a02      	cmp	r2, #2
 8000596:	d11f      	bne.n	80005d8 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000598:	2407      	movs	r4, #7
 800059a:	270f      	movs	r7, #15
 800059c:	401c      	ands	r4, r3
 800059e:	00a4      	lsls	r4, r4, #2
 80005a0:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80005a2:	08da      	lsrs	r2, r3, #3
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	1882      	adds	r2, r0, r2
 80005a8:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005aa:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005ac:	690f      	ldr	r7, [r1, #16]
 80005ae:	40a7      	lsls	r7, r4
 80005b0:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005b2:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005b4:	2403      	movs	r4, #3
 80005b6:	005e      	lsls	r6, r3, #1
 80005b8:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005ba:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005bc:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005be:	68cc      	ldr	r4, [r1, #12]
 80005c0:	40b4      	lsls	r4, r6
 80005c2:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005c4:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c6:	4662      	mov	r2, ip
 80005c8:	06d2      	lsls	r2, r2, #27
 80005ca:	0fd2      	lsrs	r2, r2, #31
 80005cc:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005ce:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005d0:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005d4:	6042      	str	r2, [r0, #4]
 80005d6:	e001      	b.n	80005dc <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d8:	2c01      	cmp	r4, #1
 80005da:	d9eb      	bls.n	80005b4 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005dc:	2403      	movs	r4, #3
 80005de:	0025      	movs	r5, r4
 80005e0:	005e      	lsls	r6, r3, #1
 80005e2:	40b5      	lsls	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e4:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005e6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e8:	4022      	ands	r2, r4
 80005ea:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80005ec:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005ee:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005f0:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80005f2:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80005f4:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005f6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80005f8:	688a      	ldr	r2, [r1, #8]
 80005fa:	40b2      	lsls	r2, r6
 80005fc:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005fe:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8000600:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000602:	00d2      	lsls	r2, r2, #3
 8000604:	d548      	bpl.n	8000698 <HAL_GPIO_Init+0x140>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	2701      	movs	r7, #1
 8000608:	4d25      	ldr	r5, [pc, #148]	; (80006a0 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800060a:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800060e:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	433a      	orrs	r2, r7
 8000612:	636a      	str	r2, [r5, #52]	; 0x34
 8000614:	4a23      	ldr	r2, [pc, #140]	; (80006a4 <HAL_GPIO_Init+0x14c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000616:	089d      	lsrs	r5, r3, #2
 8000618:	00ad      	lsls	r5, r5, #2
 800061a:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800061c:	220f      	movs	r2, #15
 800061e:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8000620:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000622:	4396      	bics	r6, r2
 8000624:	9602      	str	r6, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000626:	26a0      	movs	r6, #160	; 0xa0
 8000628:	2200      	movs	r2, #0
 800062a:	05f6      	lsls	r6, r6, #23
 800062c:	42b0      	cmp	r0, r6
 800062e:	d008      	beq.n	8000642 <HAL_GPIO_Init+0xea>
 8000630:	4e1d      	ldr	r6, [pc, #116]	; (80006a8 <HAL_GPIO_Init+0x150>)
 8000632:	003a      	movs	r2, r7
 8000634:	42b0      	cmp	r0, r6
 8000636:	d004      	beq.n	8000642 <HAL_GPIO_Init+0xea>
 8000638:	4f1c      	ldr	r7, [pc, #112]	; (80006ac <HAL_GPIO_Init+0x154>)
 800063a:	1892      	adds	r2, r2, r2
 800063c:	42b8      	cmp	r0, r7
 800063e:	d000      	beq.n	8000642 <HAL_GPIO_Init+0xea>
 8000640:	9a03      	ldr	r2, [sp, #12]
 8000642:	40a2      	lsls	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000644:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000646:	9c02      	ldr	r4, [sp, #8]
 8000648:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 800064a:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 800064c:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 800064e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000650:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000652:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000654:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000656:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000658:	03ff      	lsls	r7, r7, #15
 800065a:	d401      	bmi.n	8000660 <HAL_GPIO_Init+0x108>
        temp &= ~((uint32_t)iocurrent);
 800065c:	0035      	movs	r5, r6
 800065e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000660:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000662:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000664:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000666:	9d00      	ldr	r5, [sp, #0]
 8000668:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800066a:	03bf      	lsls	r7, r7, #14
 800066c:	d401      	bmi.n	8000672 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 800066e:	0035      	movs	r5, r6
 8000670:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000672:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000674:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000676:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000678:	9d00      	ldr	r5, [sp, #0]
 800067a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067c:	02ff      	lsls	r7, r7, #11
 800067e:	d401      	bmi.n	8000684 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000680:	0035      	movs	r5, r6
 8000682:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000684:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000686:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000688:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800068a:	9e00      	ldr	r6, [sp, #0]
 800068c:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800068e:	02bf      	lsls	r7, r7, #10
 8000690:	d401      	bmi.n	8000696 <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 8000692:	4025      	ands	r5, r4
 8000694:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000696:	60d6      	str	r6, [r2, #12]
    position++;
 8000698:	3301      	adds	r3, #1
 800069a:	e768      	b.n	800056e <HAL_GPIO_Init+0x16>
 800069c:	afffe400 	.word	0xafffe400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010000 	.word	0x40010000
 80006a8:	50000400 	.word	0x50000400
 80006ac:	50000800 	.word	0x50000800
 80006b0:	40010400 	.word	0x40010400

080006b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d001      	beq.n	80006bc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006b8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006ba:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80006bc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006be:	e7fc      	b.n	80006ba <HAL_GPIO_WritePin+0x6>

080006c0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80006c0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80006c4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80006c6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80006c8:	400a      	ands	r2, r1
 80006ca:	2a08      	cmp	r2, #8
 80006cc:	d026      	beq.n	800071c <HAL_RCC_GetSysClockFreq+0x5c>
 80006ce:	2a0c      	cmp	r2, #12
 80006d0:	d006      	beq.n	80006e0 <HAL_RCC_GetSysClockFreq+0x20>
 80006d2:	2a04      	cmp	r2, #4
 80006d4:	d11a      	bne.n	800070c <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d421      	bmi.n	8000720 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80006dc:	4812      	ldr	r0, [pc, #72]	; (8000728 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80006de:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80006e0:	028a      	lsls	r2, r1, #10
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <HAL_RCC_GetSysClockFreq+0x6c>)
 80006e4:	0f12      	lsrs	r2, r2, #28
 80006e6:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80006e8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80006ea:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80006ec:	0f89      	lsrs	r1, r1, #30
 80006ee:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80006f0:	03c0      	lsls	r0, r0, #15
 80006f2:	d504      	bpl.n	80006fe <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80006f4:	480e      	ldr	r0, [pc, #56]	; (8000730 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80006f6:	4350      	muls	r0, r2
 80006f8:	f7ff fd06 	bl	8000108 <__udivsi3>
 80006fc:	e7ef      	b.n	80006de <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d501      	bpl.n	8000708 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_RCC_GetSysClockFreq+0x74>)
 8000706:	e7f6      	b.n	80006f6 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <HAL_RCC_GetSysClockFreq+0x68>)
 800070a:	e7f4      	b.n	80006f6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800070c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800070e:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000710:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000712:	041b      	lsls	r3, r3, #16
 8000714:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000716:	3301      	adds	r3, #1
 8000718:	4098      	lsls	r0, r3
 800071a:	e7e0      	b.n	80006de <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <HAL_RCC_GetSysClockFreq+0x70>)
 800071e:	e7de      	b.n	80006de <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000722:	e7dc      	b.n	80006de <HAL_RCC_GetSysClockFreq+0x1e>
 8000724:	40021000 	.word	0x40021000
 8000728:	00f42400 	.word	0x00f42400
 800072c:	080012c8 	.word	0x080012c8
 8000730:	007a1200 	.word	0x007a1200
 8000734:	003d0900 	.word	0x003d0900

08000738 <HAL_RCC_OscConfig>:
{
 8000738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073a:	0005      	movs	r5, r0
 800073c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800073e:	2800      	cmp	r0, #0
 8000740:	d102      	bne.n	8000748 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000742:	2001      	movs	r0, #1
}
 8000744:	b007      	add	sp, #28
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000748:	230c      	movs	r3, #12
 800074a:	4cc0      	ldr	r4, [pc, #768]	; (8000a4c <HAL_RCC_OscConfig+0x314>)
 800074c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800074e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000750:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	025b      	lsls	r3, r3, #9
 8000756:	401a      	ands	r2, r3
 8000758:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800075a:	6802      	ldr	r2, [r0, #0]
 800075c:	07d2      	lsls	r2, r2, #31
 800075e:	d43d      	bmi.n	80007dc <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000760:	682b      	ldr	r3, [r5, #0]
 8000762:	079b      	lsls	r3, r3, #30
 8000764:	d500      	bpl.n	8000768 <HAL_RCC_OscConfig+0x30>
 8000766:	e083      	b.n	8000870 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000768:	682b      	ldr	r3, [r5, #0]
 800076a:	06db      	lsls	r3, r3, #27
 800076c:	d528      	bpl.n	80007c0 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800076e:	2e00      	cmp	r6, #0
 8000770:	d000      	beq.n	8000774 <HAL_RCC_OscConfig+0x3c>
 8000772:	e0dd      	b.n	8000930 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	059b      	lsls	r3, r3, #22
 8000778:	d502      	bpl.n	8000780 <HAL_RCC_OscConfig+0x48>
 800077a:	69ab      	ldr	r3, [r5, #24]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0e0      	beq.n	8000742 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000780:	6862      	ldr	r2, [r4, #4]
 8000782:	49b3      	ldr	r1, [pc, #716]	; (8000a50 <HAL_RCC_OscConfig+0x318>)
 8000784:	6a2b      	ldr	r3, [r5, #32]
 8000786:	400a      	ands	r2, r1
 8000788:	431a      	orrs	r2, r3
 800078a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800078c:	6861      	ldr	r1, [r4, #4]
 800078e:	69ea      	ldr	r2, [r5, #28]
 8000790:	0209      	lsls	r1, r1, #8
 8000792:	0a09      	lsrs	r1, r1, #8
 8000794:	0612      	lsls	r2, r2, #24
 8000796:	430a      	orrs	r2, r1
 8000798:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0b5b      	lsrs	r3, r3, #13
 800079e:	3301      	adds	r3, #1
 80007a0:	0212      	lsls	r2, r2, #8
 80007a2:	409a      	lsls	r2, r3
 80007a4:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007a6:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007a8:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007aa:	060a      	lsls	r2, r1, #24
 80007ac:	49a9      	ldr	r1, [pc, #676]	; (8000a54 <HAL_RCC_OscConfig+0x31c>)
 80007ae:	0f12      	lsrs	r2, r2, #28
 80007b0:	5c8a      	ldrb	r2, [r1, r2]
 80007b2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80007b4:	4aa8      	ldr	r2, [pc, #672]	; (8000a58 <HAL_RCC_OscConfig+0x320>)
 80007b6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007b8:	f7ff fd32 	bl	8000220 <HAL_InitTick>
        if(status != HAL_OK)
 80007bc:	2800      	cmp	r0, #0
 80007be:	d1c1      	bne.n	8000744 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007c0:	682b      	ldr	r3, [r5, #0]
 80007c2:	071b      	lsls	r3, r3, #28
 80007c4:	d500      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x90>
 80007c6:	e0ea      	b.n	800099e <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007c8:	682b      	ldr	r3, [r5, #0]
 80007ca:	075b      	lsls	r3, r3, #29
 80007cc:	d500      	bpl.n	80007d0 <HAL_RCC_OscConfig+0x98>
 80007ce:	e10c      	b.n	80009ea <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <HAL_RCC_OscConfig+0xa0>
 80007d6:	e191      	b.n	8000afc <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 80007d8:	2000      	movs	r0, #0
 80007da:	e7b3      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007dc:	2e08      	cmp	r6, #8
 80007de:	d004      	beq.n	80007ea <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80007e0:	2e0c      	cmp	r6, #12
 80007e2:	d109      	bne.n	80007f8 <HAL_RCC_OscConfig+0xc0>
 80007e4:	9a01      	ldr	r2, [sp, #4]
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d006      	beq.n	80007f8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	039b      	lsls	r3, r3, #14
 80007ee:	d5b7      	bpl.n	8000760 <HAL_RCC_OscConfig+0x28>
 80007f0:	686b      	ldr	r3, [r5, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1b4      	bne.n	8000760 <HAL_RCC_OscConfig+0x28>
 80007f6:	e7a4      	b.n	8000742 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f8:	686a      	ldr	r2, [r5, #4]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d111      	bne.n	8000822 <HAL_RCC_OscConfig+0xea>
 80007fe:	6822      	ldr	r2, [r4, #0]
 8000800:	4313      	orrs	r3, r2
 8000802:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000804:	f7ff fd40 	bl	8000288 <HAL_GetTick>
 8000808:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	6823      	ldr	r3, [r4, #0]
 800080e:	0292      	lsls	r2, r2, #10
 8000810:	4213      	tst	r3, r2
 8000812:	d1a5      	bne.n	8000760 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000814:	f7ff fd38 	bl	8000288 <HAL_GetTick>
 8000818:	1bc0      	subs	r0, r0, r7
 800081a:	2864      	cmp	r0, #100	; 0x64
 800081c:	d9f5      	bls.n	800080a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800081e:	2003      	movs	r0, #3
 8000820:	e790      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000822:	21a0      	movs	r1, #160	; 0xa0
 8000824:	02c9      	lsls	r1, r1, #11
 8000826:	428a      	cmp	r2, r1
 8000828:	d105      	bne.n	8000836 <HAL_RCC_OscConfig+0xfe>
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	6821      	ldr	r1, [r4, #0]
 800082e:	02d2      	lsls	r2, r2, #11
 8000830:	430a      	orrs	r2, r1
 8000832:	6022      	str	r2, [r4, #0]
 8000834:	e7e3      	b.n	80007fe <HAL_RCC_OscConfig+0xc6>
 8000836:	6821      	ldr	r1, [r4, #0]
 8000838:	4888      	ldr	r0, [pc, #544]	; (8000a5c <HAL_RCC_OscConfig+0x324>)
 800083a:	4001      	ands	r1, r0
 800083c:	6021      	str	r1, [r4, #0]
 800083e:	6821      	ldr	r1, [r4, #0]
 8000840:	400b      	ands	r3, r1
 8000842:	9305      	str	r3, [sp, #20]
 8000844:	9b05      	ldr	r3, [sp, #20]
 8000846:	4986      	ldr	r1, [pc, #536]	; (8000a60 <HAL_RCC_OscConfig+0x328>)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	400b      	ands	r3, r1
 800084c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800084e:	2a00      	cmp	r2, #0
 8000850:	d1d8      	bne.n	8000804 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8000852:	f7ff fd19 	bl	8000288 <HAL_GetTick>
 8000856:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	0292      	lsls	r2, r2, #10
 800085e:	4213      	tst	r3, r2
 8000860:	d100      	bne.n	8000864 <HAL_RCC_OscConfig+0x12c>
 8000862:	e77d      	b.n	8000760 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000864:	f7ff fd10 	bl	8000288 <HAL_GetTick>
 8000868:	1bc0      	subs	r0, r0, r7
 800086a:	2864      	cmp	r0, #100	; 0x64
 800086c:	d9f4      	bls.n	8000858 <HAL_RCC_OscConfig+0x120>
 800086e:	e7d6      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000870:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8000872:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000874:	4213      	tst	r3, r2
 8000876:	d003      	beq.n	8000880 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000878:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 800087a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800087c:	4311      	orrs	r1, r2
 800087e:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000880:	2e04      	cmp	r6, #4
 8000882:	d004      	beq.n	800088e <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000884:	2e0c      	cmp	r6, #12
 8000886:	d125      	bne.n	80008d4 <HAL_RCC_OscConfig+0x19c>
 8000888:	9a01      	ldr	r2, [sp, #4]
 800088a:	2a00      	cmp	r2, #0
 800088c:	d122      	bne.n	80008d4 <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800088e:	6822      	ldr	r2, [r4, #0]
 8000890:	0752      	lsls	r2, r2, #29
 8000892:	d502      	bpl.n	800089a <HAL_RCC_OscConfig+0x162>
 8000894:	2b00      	cmp	r3, #0
 8000896:	d100      	bne.n	800089a <HAL_RCC_OscConfig+0x162>
 8000898:	e753      	b.n	8000742 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800089a:	6861      	ldr	r1, [r4, #4]
 800089c:	692a      	ldr	r2, [r5, #16]
 800089e:	4871      	ldr	r0, [pc, #452]	; (8000a64 <HAL_RCC_OscConfig+0x32c>)
 80008a0:	0212      	lsls	r2, r2, #8
 80008a2:	4001      	ands	r1, r0
 80008a4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008a6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008aa:	6822      	ldr	r2, [r4, #0]
 80008ac:	438a      	bics	r2, r1
 80008ae:	4313      	orrs	r3, r2
 80008b0:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008b2:	f7ff ff05 	bl	80006c0 <HAL_RCC_GetSysClockFreq>
 80008b6:	68e3      	ldr	r3, [r4, #12]
 80008b8:	4a66      	ldr	r2, [pc, #408]	; (8000a54 <HAL_RCC_OscConfig+0x31c>)
 80008ba:	061b      	lsls	r3, r3, #24
 80008bc:	0f1b      	lsrs	r3, r3, #28
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	40d8      	lsrs	r0, r3
 80008c2:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <HAL_RCC_OscConfig+0x320>)
 80008c4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff fcaa 	bl	8000220 <HAL_InitTick>
      if(status != HAL_OK)
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d100      	bne.n	80008d2 <HAL_RCC_OscConfig+0x19a>
 80008d0:	e74a      	b.n	8000768 <HAL_RCC_OscConfig+0x30>
 80008d2:	e737      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d019      	beq.n	800090c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008d8:	2109      	movs	r1, #9
 80008da:	6822      	ldr	r2, [r4, #0]
 80008dc:	438a      	bics	r2, r1
 80008de:	4313      	orrs	r3, r2
 80008e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008e2:	f7ff fcd1 	bl	8000288 <HAL_GetTick>
 80008e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80008e8:	2204      	movs	r2, #4
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	4213      	tst	r3, r2
 80008ee:	d007      	beq.n	8000900 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008f0:	6862      	ldr	r2, [r4, #4]
 80008f2:	692b      	ldr	r3, [r5, #16]
 80008f4:	495b      	ldr	r1, [pc, #364]	; (8000a64 <HAL_RCC_OscConfig+0x32c>)
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	400a      	ands	r2, r1
 80008fa:	4313      	orrs	r3, r2
 80008fc:	6063      	str	r3, [r4, #4]
 80008fe:	e733      	b.n	8000768 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000900:	f7ff fcc2 	bl	8000288 <HAL_GetTick>
 8000904:	1bc0      	subs	r0, r0, r7
 8000906:	2802      	cmp	r0, #2
 8000908:	d9ee      	bls.n	80008e8 <HAL_RCC_OscConfig+0x1b0>
 800090a:	e788      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 800090c:	2201      	movs	r2, #1
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	4393      	bics	r3, r2
 8000912:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000914:	f7ff fcb8 	bl	8000288 <HAL_GetTick>
 8000918:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800091a:	2204      	movs	r2, #4
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	4213      	tst	r3, r2
 8000920:	d100      	bne.n	8000924 <HAL_RCC_OscConfig+0x1ec>
 8000922:	e721      	b.n	8000768 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000924:	f7ff fcb0 	bl	8000288 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	2802      	cmp	r0, #2
 800092c:	d9f5      	bls.n	800091a <HAL_RCC_OscConfig+0x1e2>
 800092e:	e776      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000930:	69ab      	ldr	r3, [r5, #24]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d020      	beq.n	8000978 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	6822      	ldr	r2, [r4, #0]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4313      	orrs	r3, r2
 800093e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000940:	f7ff fca2 	bl	8000288 <HAL_GetTick>
 8000944:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	0092      	lsls	r2, r2, #2
 800094c:	4213      	tst	r3, r2
 800094e:	d00d      	beq.n	800096c <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000950:	6863      	ldr	r3, [r4, #4]
 8000952:	4a3f      	ldr	r2, [pc, #252]	; (8000a50 <HAL_RCC_OscConfig+0x318>)
 8000954:	4013      	ands	r3, r2
 8000956:	6a2a      	ldr	r2, [r5, #32]
 8000958:	4313      	orrs	r3, r2
 800095a:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800095c:	6862      	ldr	r2, [r4, #4]
 800095e:	69eb      	ldr	r3, [r5, #28]
 8000960:	0212      	lsls	r2, r2, #8
 8000962:	061b      	lsls	r3, r3, #24
 8000964:	0a12      	lsrs	r2, r2, #8
 8000966:	4313      	orrs	r3, r2
 8000968:	6063      	str	r3, [r4, #4]
 800096a:	e729      	b.n	80007c0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800096c:	f7ff fc8c 	bl	8000288 <HAL_GetTick>
 8000970:	1bc0      	subs	r0, r0, r7
 8000972:	2802      	cmp	r0, #2
 8000974:	d9e7      	bls.n	8000946 <HAL_RCC_OscConfig+0x20e>
 8000976:	e752      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	4a3b      	ldr	r2, [pc, #236]	; (8000a68 <HAL_RCC_OscConfig+0x330>)
 800097c:	4013      	ands	r3, r2
 800097e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000980:	f7ff fc82 	bl	8000288 <HAL_GetTick>
 8000984:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	4213      	tst	r3, r2
 800098e:	d100      	bne.n	8000992 <HAL_RCC_OscConfig+0x25a>
 8000990:	e716      	b.n	80007c0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000992:	f7ff fc79 	bl	8000288 <HAL_GetTick>
 8000996:	1bc0      	subs	r0, r0, r7
 8000998:	2802      	cmp	r0, #2
 800099a:	d9f4      	bls.n	8000986 <HAL_RCC_OscConfig+0x24e>
 800099c:	e73f      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800099e:	696a      	ldr	r2, [r5, #20]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d010      	beq.n	80009c8 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 80009a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80009a8:	4313      	orrs	r3, r2
 80009aa:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009ac:	f7ff fc6c 	bl	8000288 <HAL_GetTick>
 80009b0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80009b2:	2202      	movs	r2, #2
 80009b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80009b6:	4213      	tst	r3, r2
 80009b8:	d000      	beq.n	80009bc <HAL_RCC_OscConfig+0x284>
 80009ba:	e705      	b.n	80007c8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc64 	bl	8000288 <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f5      	bls.n	80009b2 <HAL_RCC_OscConfig+0x27a>
 80009c6:	e72a      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 80009c8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80009ca:	439a      	bics	r2, r3
 80009cc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009ce:	f7ff fc5b 	bl	8000288 <HAL_GetTick>
 80009d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80009d4:	2202      	movs	r2, #2
 80009d6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80009d8:	4213      	tst	r3, r2
 80009da:	d100      	bne.n	80009de <HAL_RCC_OscConfig+0x2a6>
 80009dc:	e6f4      	b.n	80007c8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009de:	f7ff fc53 	bl	8000288 <HAL_GetTick>
 80009e2:	1bc0      	subs	r0, r0, r7
 80009e4:	2802      	cmp	r0, #2
 80009e6:	d9f5      	bls.n	80009d4 <HAL_RCC_OscConfig+0x29c>
 80009e8:	e719      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ea:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80009ec:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009f0:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80009f2:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009f4:	421a      	tst	r2, r3
 80009f6:	d104      	bne.n	8000a02 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009fa:	4313      	orrs	r3, r2
 80009fc:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80009fe:	2301      	movs	r3, #1
 8000a00:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	4f19      	ldr	r7, [pc, #100]	; (8000a6c <HAL_RCC_OscConfig+0x334>)
 8000a06:	0052      	lsls	r2, r2, #1
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	4213      	tst	r3, r2
 8000a0c:	d008      	beq.n	8000a20 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	68ab      	ldr	r3, [r5, #8]
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d12b      	bne.n	8000a70 <HAL_RCC_OscConfig+0x338>
 8000a18:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	6523      	str	r3, [r4, #80]	; 0x50
 8000a1e:	e04c      	b.n	8000aba <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	4313      	orrs	r3, r2
 8000a28:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fc2d 	bl	8000288 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000a32:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	9303      	str	r3, [sp, #12]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	9a03      	ldr	r2, [sp, #12]
 8000a3a:	4213      	tst	r3, r2
 8000a3c:	d1e7      	bne.n	8000a0e <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a3e:	f7ff fc23 	bl	8000288 <HAL_GetTick>
 8000a42:	9b02      	ldr	r3, [sp, #8]
 8000a44:	1ac0      	subs	r0, r0, r3
 8000a46:	2864      	cmp	r0, #100	; 0x64
 8000a48:	d9f5      	bls.n	8000a36 <HAL_RCC_OscConfig+0x2fe>
 8000a4a:	e6e8      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	ffff1fff 	.word	0xffff1fff
 8000a54:	080012b8 	.word	0x080012b8
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	fffeffff 	.word	0xfffeffff
 8000a60:	fffbffff 	.word	0xfffbffff
 8000a64:	ffffe0ff 	.word	0xffffe0ff
 8000a68:	fffffeff 	.word	0xfffffeff
 8000a6c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d116      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x36a>
 8000a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a76:	4a53      	ldr	r2, [pc, #332]	; (8000bc4 <HAL_RCC_OscConfig+0x48c>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	6523      	str	r3, [r4, #80]	; 0x50
 8000a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a7e:	4a52      	ldr	r2, [pc, #328]	; (8000bc8 <HAL_RCC_OscConfig+0x490>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a84:	f7ff fc00 	bl	8000288 <HAL_GetTick>
 8000a88:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a8e:	0092      	lsls	r2, r2, #2
 8000a90:	4213      	tst	r3, r2
 8000a92:	d02a      	beq.n	8000aea <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a94:	f7ff fbf8 	bl	8000288 <HAL_GetTick>
 8000a98:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <HAL_RCC_OscConfig+0x494>)
 8000a9a:	1bc0      	subs	r0, r0, r7
 8000a9c:	4298      	cmp	r0, r3
 8000a9e:	d9f4      	bls.n	8000a8a <HAL_RCC_OscConfig+0x352>
 8000aa0:	e6bd      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa2:	21a0      	movs	r1, #160	; 0xa0
 8000aa4:	00c9      	lsls	r1, r1, #3
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d10b      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x38a>
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6523      	str	r3, [r4, #80]	; 0x50
 8000ab4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000aba:	f7ff fbe5 	bl	8000288 <HAL_GetTick>
 8000abe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ac0:	e00e      	b.n	8000ae0 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ac2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ac4:	4a3f      	ldr	r2, [pc, #252]	; (8000bc4 <HAL_RCC_OscConfig+0x48c>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	6523      	str	r3, [r4, #80]	; 0x50
 8000aca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000acc:	4a3e      	ldr	r2, [pc, #248]	; (8000bc8 <HAL_RCC_OscConfig+0x490>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	e7a4      	b.n	8000a1c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fbd9 	bl	8000288 <HAL_GetTick>
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <HAL_RCC_OscConfig+0x494>)
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d900      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x3a8>
 8000ade:	e69e      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	4213      	tst	r3, r2
 8000ae8:	d0f3      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000aea:	9b01      	ldr	r3, [sp, #4]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d000      	beq.n	8000af2 <HAL_RCC_OscConfig+0x3ba>
 8000af0:	e66e      	b.n	80007d0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000af4:	4a36      	ldr	r2, [pc, #216]	; (8000bd0 <HAL_RCC_OscConfig+0x498>)
 8000af6:	4013      	ands	r3, r2
 8000af8:	63a3      	str	r3, [r4, #56]	; 0x38
 8000afa:	e669      	b.n	80007d0 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000afc:	2e0c      	cmp	r6, #12
 8000afe:	d043      	beq.n	8000b88 <HAL_RCC_OscConfig+0x450>
 8000b00:	4a34      	ldr	r2, [pc, #208]	; (8000bd4 <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d12e      	bne.n	8000b64 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 8000b06:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b08:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fbbb 	bl	8000288 <HAL_GetTick>
 8000b12:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b14:	04b6      	lsls	r6, r6, #18
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	4233      	tst	r3, r6
 8000b1a:	d11d      	bne.n	8000b58 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b1c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000b1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b20:	68e2      	ldr	r2, [r4, #12]
 8000b22:	430b      	orrs	r3, r1
 8000b24:	492c      	ldr	r1, [pc, #176]	; (8000bd8 <HAL_RCC_OscConfig+0x4a0>)
 8000b26:	400a      	ands	r2, r1
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000b2c:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000b32:	2380      	movs	r3, #128	; 0x80
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	045b      	lsls	r3, r3, #17
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b3c:	f7ff fba4 	bl	8000288 <HAL_GetTick>
 8000b40:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000b42:	04ad      	lsls	r5, r5, #18
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	422b      	tst	r3, r5
 8000b48:	d000      	beq.n	8000b4c <HAL_RCC_OscConfig+0x414>
 8000b4a:	e645      	b.n	80007d8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4c:	f7ff fb9c 	bl	8000288 <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f6      	bls.n	8000b44 <HAL_RCC_OscConfig+0x40c>
 8000b56:	e662      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b58:	f7ff fb96 	bl	8000288 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d9d9      	bls.n	8000b16 <HAL_RCC_OscConfig+0x3de>
 8000b62:	e65c      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8000b64:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b66:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000b68:	4013      	ands	r3, r2
 8000b6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fb8c 	bl	8000288 <HAL_GetTick>
 8000b70:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b72:	04ad      	lsls	r5, r5, #18
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	422b      	tst	r3, r5
 8000b78:	d100      	bne.n	8000b7c <HAL_RCC_OscConfig+0x444>
 8000b7a:	e62d      	b.n	80007d8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7c:	f7ff fb84 	bl	8000288 <HAL_GetTick>
 8000b80:	1b80      	subs	r0, r0, r6
 8000b82:	2802      	cmp	r0, #2
 8000b84:	d9f6      	bls.n	8000b74 <HAL_RCC_OscConfig+0x43c>
 8000b86:	e64a      	b.n	800081e <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8000b88:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d100      	bne.n	8000b90 <HAL_RCC_OscConfig+0x458>
 8000b8e:	e5d9      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b90:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000b92:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b94:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000b96:	0252      	lsls	r2, r2, #9
 8000b98:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000b9a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	d000      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x46a>
 8000ba0:	e5d0      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ba2:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ba4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000ba6:	0392      	lsls	r2, r2, #14
 8000ba8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000baa:	428a      	cmp	r2, r1
 8000bac:	d000      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x478>
 8000bae:	e5c9      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000bb0:	20c0      	movs	r0, #192	; 0xc0
 8000bb2:	0400      	lsls	r0, r0, #16
 8000bb4:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000bb6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000bb8:	1a18      	subs	r0, r3, r0
 8000bba:	1e43      	subs	r3, r0, #1
 8000bbc:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000bbe:	b2c0      	uxtb	r0, r0
 8000bc0:	e5c0      	b.n	8000744 <HAL_RCC_OscConfig+0xc>
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	fffffeff 	.word	0xfffffeff
 8000bc8:	fffffbff 	.word	0xfffffbff
 8000bcc:	00001388 	.word	0x00001388
 8000bd0:	efffffff 	.word	0xefffffff
 8000bd4:	feffffff 	.word	0xfeffffff
 8000bd8:	ff02ffff 	.word	0xff02ffff

08000bdc <HAL_RCC_ClockConfig>:
{
 8000bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bde:	1e06      	subs	r6, r0, #0
 8000be0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000be2:	d101      	bne.n	8000be8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
}
 8000be6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000be8:	2201      	movs	r2, #1
 8000bea:	4c51      	ldr	r4, [pc, #324]	; (8000d30 <HAL_RCC_ClockConfig+0x154>)
 8000bec:	9901      	ldr	r1, [sp, #4]
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d327      	bcc.n	8000c46 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bf6:	6832      	ldr	r2, [r6, #0]
 8000bf8:	0793      	lsls	r3, r2, #30
 8000bfa:	d42f      	bmi.n	8000c5c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bfc:	07d3      	lsls	r3, r2, #31
 8000bfe:	d435      	bmi.n	8000c6c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c00:	2301      	movs	r3, #1
 8000c02:	6822      	ldr	r2, [r4, #0]
 8000c04:	9901      	ldr	r1, [sp, #4]
 8000c06:	401a      	ands	r2, r3
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d200      	bcs.n	8000c0e <HAL_RCC_ClockConfig+0x32>
 8000c0c:	e081      	b.n	8000d12 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c0e:	6832      	ldr	r2, [r6, #0]
 8000c10:	4c48      	ldr	r4, [pc, #288]	; (8000d34 <HAL_RCC_ClockConfig+0x158>)
 8000c12:	0753      	lsls	r3, r2, #29
 8000c14:	d500      	bpl.n	8000c18 <HAL_RCC_ClockConfig+0x3c>
 8000c16:	e084      	b.n	8000d22 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c18:	0713      	lsls	r3, r2, #28
 8000c1a:	d506      	bpl.n	8000c2a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c1c:	68e2      	ldr	r2, [r4, #12]
 8000c1e:	6933      	ldr	r3, [r6, #16]
 8000c20:	4945      	ldr	r1, [pc, #276]	; (8000d38 <HAL_RCC_ClockConfig+0x15c>)
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	400a      	ands	r2, r1
 8000c26:	4313      	orrs	r3, r2
 8000c28:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c2a:	f7ff fd49 	bl	80006c0 <HAL_RCC_GetSysClockFreq>
 8000c2e:	68e3      	ldr	r3, [r4, #12]
 8000c30:	4a42      	ldr	r2, [pc, #264]	; (8000d3c <HAL_RCC_ClockConfig+0x160>)
 8000c32:	061b      	lsls	r3, r3, #24
 8000c34:	0f1b      	lsrs	r3, r3, #28
 8000c36:	5cd3      	ldrb	r3, [r2, r3]
 8000c38:	40d8      	lsrs	r0, r3
 8000c3a:	4b41      	ldr	r3, [pc, #260]	; (8000d40 <HAL_RCC_ClockConfig+0x164>)
 8000c3c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff faee 	bl	8000220 <HAL_InitTick>
 8000c44:	e7cf      	b.n	8000be6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	9901      	ldr	r1, [sp, #4]
 8000c4a:	4393      	bics	r3, r2
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	4013      	ands	r3, r2
 8000c54:	9a01      	ldr	r2, [sp, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d1c4      	bne.n	8000be4 <HAL_RCC_ClockConfig+0x8>
 8000c5a:	e7cc      	b.n	8000bf6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c5c:	20f0      	movs	r0, #240	; 0xf0
 8000c5e:	4935      	ldr	r1, [pc, #212]	; (8000d34 <HAL_RCC_ClockConfig+0x158>)
 8000c60:	68cb      	ldr	r3, [r1, #12]
 8000c62:	4383      	bics	r3, r0
 8000c64:	68b0      	ldr	r0, [r6, #8]
 8000c66:	4303      	orrs	r3, r0
 8000c68:	60cb      	str	r3, [r1, #12]
 8000c6a:	e7c7      	b.n	8000bfc <HAL_RCC_ClockConfig+0x20>
 8000c6c:	4d31      	ldr	r5, [pc, #196]	; (8000d34 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c6e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c70:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c72:	2a02      	cmp	r2, #2
 8000c74:	d119      	bne.n	8000caa <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c76:	039b      	lsls	r3, r3, #14
 8000c78:	d5b4      	bpl.n	8000be4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c7a:	2103      	movs	r1, #3
 8000c7c:	68eb      	ldr	r3, [r5, #12]
 8000c7e:	438b      	bics	r3, r1
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000c84:	f7ff fb00 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c88:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c8a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d119      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c90:	220c      	movs	r2, #12
 8000c92:	68eb      	ldr	r3, [r5, #12]
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d0b2      	beq.n	8000c00 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c9a:	f7ff faf5 	bl	8000288 <HAL_GetTick>
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_RCC_ClockConfig+0x168>)
 8000ca0:	1bc0      	subs	r0, r0, r7
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d9f4      	bls.n	8000c90 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	e79d      	b.n	8000be6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000caa:	2a03      	cmp	r2, #3
 8000cac:	d102      	bne.n	8000cb4 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cae:	019b      	lsls	r3, r3, #6
 8000cb0:	d4e3      	bmi.n	8000c7a <HAL_RCC_ClockConfig+0x9e>
 8000cb2:	e797      	b.n	8000be4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000cb4:	2a01      	cmp	r2, #1
 8000cb6:	d102      	bne.n	8000cbe <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cb8:	075b      	lsls	r3, r3, #29
 8000cba:	d4de      	bmi.n	8000c7a <HAL_RCC_ClockConfig+0x9e>
 8000cbc:	e792      	b.n	8000be4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cbe:	059b      	lsls	r3, r3, #22
 8000cc0:	d4db      	bmi.n	8000c7a <HAL_RCC_ClockConfig+0x9e>
 8000cc2:	e78f      	b.n	8000be4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d10b      	bne.n	8000ce0 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cc8:	220c      	movs	r2, #12
 8000cca:	68eb      	ldr	r3, [r5, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d096      	beq.n	8000c00 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cd2:	f7ff fad9 	bl	8000288 <HAL_GetTick>
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_RCC_ClockConfig+0x168>)
 8000cd8:	1bc0      	subs	r0, r0, r7
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d9f4      	bls.n	8000cc8 <HAL_RCC_ClockConfig+0xec>
 8000cde:	e7e2      	b.n	8000ca6 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d010      	beq.n	8000d06 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ce4:	220c      	movs	r2, #12
 8000ce6:	68eb      	ldr	r3, [r5, #12]
 8000ce8:	4213      	tst	r3, r2
 8000cea:	d089      	beq.n	8000c00 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cec:	f7ff facc 	bl	8000288 <HAL_GetTick>
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_RCC_ClockConfig+0x168>)
 8000cf2:	1bc0      	subs	r0, r0, r7
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d9f5      	bls.n	8000ce4 <HAL_RCC_ClockConfig+0x108>
 8000cf8:	e7d5      	b.n	8000ca6 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cfa:	f7ff fac5 	bl	8000288 <HAL_GetTick>
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_RCC_ClockConfig+0x168>)
 8000d00:	1bc0      	subs	r0, r0, r7
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d8cf      	bhi.n	8000ca6 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d06:	220c      	movs	r2, #12
 8000d08:	68eb      	ldr	r3, [r5, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d1f4      	bne.n	8000cfa <HAL_RCC_ClockConfig+0x11e>
 8000d10:	e776      	b.n	8000c00 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d12:	6822      	ldr	r2, [r4, #0]
 8000d14:	439a      	bics	r2, r3
 8000d16:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	421a      	tst	r2, r3
 8000d1c:	d000      	beq.n	8000d20 <HAL_RCC_ClockConfig+0x144>
 8000d1e:	e761      	b.n	8000be4 <HAL_RCC_ClockConfig+0x8>
 8000d20:	e775      	b.n	8000c0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d22:	68e3      	ldr	r3, [r4, #12]
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <HAL_RCC_ClockConfig+0x16c>)
 8000d26:	400b      	ands	r3, r1
 8000d28:	68f1      	ldr	r1, [r6, #12]
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	60e3      	str	r3, [r4, #12]
 8000d2e:	e773      	b.n	8000c18 <HAL_RCC_ClockConfig+0x3c>
 8000d30:	40022000 	.word	0x40022000
 8000d34:	40021000 	.word	0x40021000
 8000d38:	ffffc7ff 	.word	0xffffc7ff
 8000d3c:	080012b8 	.word	0x080012b8
 8000d40:	20000000 	.word	0x20000000
 8000d44:	00001388 	.word	0x00001388
 8000d48:	fffff8ff 	.word	0xfffff8ff

08000d4c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000d4c:	b513      	push	{r0, r1, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d4e:	2208      	movs	r2, #8
 8000d50:	2100      	movs	r1, #0
 8000d52:	4668      	mov	r0, sp
 8000d54:	f000 fa9c 	bl	8001290 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
  hadc.Init.OversamplingMode = DISABLE;
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000d58:	22c0      	movs	r2, #192	; 0xc0
  hadc.Instance = ADC1;
 8000d5a:	4c19      	ldr	r4, [pc, #100]	; (8000dc0 <MX_ADC_Init+0x74>)
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_ADC_Init+0x78>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000d5e:	0612      	lsls	r2, r2, #24
 8000d60:	6062      	str	r2, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d62:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 8000d64:	6023      	str	r3, [r4, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000d66:	2300      	movs	r3, #0
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d68:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
 8000d6a:	18a2      	adds	r2, r4, r2
 8000d6c:	77d3      	strb	r3, [r2, #31]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	1ca2      	adds	r2, r4, #2
 8000d70:	77d3      	strb	r3, [r2, #31]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d72:	22c2      	movs	r2, #194	; 0xc2
 8000d74:	32ff      	adds	r2, #255	; 0xff
 8000d76:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d78:	0022      	movs	r2, r4
 8000d7a:	322c      	adds	r2, #44	; 0x2c
 8000d7c:	7013      	strb	r3, [r2, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7e:	2204      	movs	r2, #4
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d80:	0020      	movs	r0, r4
  hadc.Init.OversamplingMode = DISABLE;
 8000d82:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d84:	60a3      	str	r3, [r4, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d86:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	60e3      	str	r3, [r4, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	6162      	str	r2, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d8e:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d90:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000d92:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d94:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d96:	f7ff fa7d 	bl	8000294 <HAL_ADC_Init>
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC_Init+0x56>
  {
    Error_Handler();
 8000d9e:	f000 f9d3 	bl	8001148 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_ADC_Init+0x7c>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000da4:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_3;
 8000da6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000da8:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000daa:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000dac:	015b      	lsls	r3, r3, #5
 8000dae:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000db0:	f7ff fb48 	bl	8000444 <HAL_ADC_ConfigChannel>
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC_Init+0x70>
  {
    Error_Handler();
 8000db8:	f000 f9c6 	bl	8001148 <Error_Handler>
  }

}
 8000dbc:	bd13      	pop	{r0, r1, r4, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000024 	.word	0x20000024
 8000dc4:	40012400 	.word	0x40012400
 8000dc8:	0c000008 	.word	0x0c000008

08000dcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	0004      	movs	r4, r0
 8000dd0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	2214      	movs	r2, #20
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	a801      	add	r0, sp, #4
 8000dd8:	f000 fa5a 	bl	8001290 <memset>
  if(adcHandle->Instance==ADC1)
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_ADC_MspInit+0x4c>)
 8000dde:	6822      	ldr	r2, [r4, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d116      	bne.n	8000e12 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_ADC_MspInit+0x50>)
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = Vbat_Level_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 8000dec:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dee:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 8000df6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dfe:	400b      	ands	r3, r1
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = Vbat_Level_Pin;
 8000e04:	2308      	movs	r3, #8
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 8000e06:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = Vbat_Level_Pin;
 8000e08:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0a:	3b05      	subs	r3, #5
 8000e0c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(Vbat_Level_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f7ff fba3 	bl	8000558 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e12:	b006      	add	sp, #24
 8000e14:	bd10      	pop	{r4, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	40012400 	.word	0x40012400
 8000e1c:	40021000 	.word	0x40021000

08000e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e22:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	2214      	movs	r2, #20
 8000e26:	2100      	movs	r1, #0
 8000e28:	a805      	add	r0, sp, #20
 8000e2a:	f000 fa31 	bl	8001290 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	2004      	movs	r0, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e34:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <MX_GPIO_Init+0xec>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin, GPIO_PIN_RESET);
 8000e36:	4c36      	ldr	r4, [pc, #216]	; (8000f10 <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Sens_Trig_GPIO_Port, Sens_Trig_Pin, GPIO_PIN_RESET);
 8000e3a:	4f36      	ldr	r7, [pc, #216]	; (8000f14 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4301      	orrs	r1, r0
 8000e3e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e42:	4002      	ands	r2, r0
 8000e44:	9201      	str	r2, [sp, #4]
 8000e46:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e4a:	307c      	adds	r0, #124	; 0x7c
 8000e4c:	4301      	orrs	r1, r0
 8000e4e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin, GPIO_PIN_RESET);
 8000e52:	0021      	movs	r1, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e54:	4002      	ands	r2, r0
 8000e56:	9202      	str	r2, [sp, #8]
 8000e58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin, GPIO_PIN_RESET);
 8000e5c:	482e      	ldr	r0, [pc, #184]	; (8000f18 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	432a      	orrs	r2, r5
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e64:	402a      	ands	r2, r5
 8000e66:	9203      	str	r2, [sp, #12]
 8000e68:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6c:	4332      	orrs	r2, r6
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	4033      	ands	r3, r6
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin, GPIO_PIN_RESET);
 8000e7a:	f7ff fc1b 	bl	80006b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Sens_Trig_GPIO_Port, Sens_Trig_Pin, GPIO_PIN_RESET);
 8000e7e:	0031      	movs	r1, r6
 8000e80:	0038      	movs	r0, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	f7ff fc16 	bl	80006b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_GLED1_Pin|MC_RLED1_Pin|Sens_PWR_Pin|MS_SEG_4C1_Pin 
 8000e88:	20a0      	movs	r0, #160	; 0xa0
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4923      	ldr	r1, [pc, #140]	; (8000f1c <MX_GPIO_Init+0xfc>)
 8000e8e:	05c0      	lsls	r0, r0, #23
 8000e90:	f7ff fc10 	bl	80006b4 <HAL_GPIO_WritePin>
                          |MC_SEG_3E1_Pin|MC_SEG_2D1_Pin|MC_SEG_10G1_Pin|MC_GLED6_Pin 
                          |MC_GLED5_Pin|MC_RLED5_Pin|MC_RLED4_Pin|MC_GLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 8000e94:	2200      	movs	r2, #0
 8000e96:	4922      	ldr	r1, [pc, #136]	; (8000f20 <MX_GPIO_Init+0x100>)
 8000e98:	4822      	ldr	r0, [pc, #136]	; (8000f24 <MX_GPIO_Init+0x104>)
 8000e9a:	f7ff fc0b 	bl	80006b4 <HAL_GPIO_WritePin>
                          |MC_RLED8_Pin|MC_RLED7_Pin|MC_GLED7_Pin|MC_RLED6_Pin 
                          |MC_SEG_10G2_Pin|MC_SEG_9F2_Pin|MC_SEG_8B2_Pin|MC_SEG_7A2_Pin 
                          |MC_SEG_4C2_Pin|MC_SEG_3E2_Pin|MC_SEG_2D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MC_GLED3_Pin|MC_RLED3_Pin|MC_GLED2_Pin|MC_RLED2_Pin;
 8000e9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea2:	a905      	add	r1, sp, #20
 8000ea4:	481c      	ldr	r0, [pc, #112]	; (8000f18 <MX_GPIO_Init+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f7ff fb54 	bl	8000558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sens_Echo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Sens_Echo_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	a905      	add	r1, sp, #20
 8000eb2:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = Sens_Echo_Pin;
 8000eb4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Sens_Echo_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f7ff fb4d 	bl	8000558 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sens_Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Sens_Trig_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	a905      	add	r1, sp, #20
 8000ec0:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = Sens_Trig_Pin;
 8000ec2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Sens_Trig_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f7ff fb45 	bl	8000558 <HAL_GPIO_Init>
                          |MC_SEG_3E1_Pin|MC_SEG_2D1_Pin|MC_SEG_10G1_Pin|MC_GLED6_Pin 
                          |MC_GLED5_Pin|MC_RLED5_Pin|MC_RLED4_Pin|MC_GLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = MC_GLED1_Pin|MC_RLED1_Pin|Sens_PWR_Pin|MS_SEG_4C1_Pin 
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_GPIO_Init+0xfc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	a905      	add	r1, sp, #20
 8000ed4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = MC_GLED1_Pin|MC_RLED1_Pin|Sens_PWR_Pin|MS_SEG_4C1_Pin 
 8000ed6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f7ff fb3b 	bl	8000558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_GPIO_Init+0x100>)
                          |MC_SEG_10G2_Pin|MC_SEG_9F2_Pin|MC_SEG_8B2_Pin|MC_SEG_7A2_Pin 
                          |MC_SEG_4C2_Pin|MC_SEG_3E2_Pin|MC_SEG_2D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	a905      	add	r1, sp, #20
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Pin = MC_SEG_9F1_Pin|MC_SEG_8B1_Pin|MC_SEG_7A1_Pin|MC_GLED8_Pin 
 8000ee8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f7ff fb32 	bl	8000558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Zero_Pin;
 8000ef4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW_Zero_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = SW_Zero_Pin;
 8000ef8:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(SW_Zero_GPIO_Port, &GPIO_InitStruct);
 8000efa:	480a      	ldr	r0, [pc, #40]	; (8000f24 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Pin = SW_Zero_Pin;
 8000efc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW_Zero_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f7ff fb29 	bl	8000558 <HAL_GPIO_Init>

}
 8000f06:	b00b      	add	sp, #44	; 0x2c
 8000f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	0000e001 	.word	0x0000e001
 8000f14:	50001c00 	.word	0x50001c00
 8000f18:	50000800 	.word	0x50000800
 8000f1c:	00009bf7 	.word	0x00009bf7
 8000f20:	0000f7ff 	.word	0x0000f7ff
 8000f24:	50000400 	.word	0x50000400

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2c:	2234      	movs	r2, #52	; 0x34
 8000f2e:	2100      	movs	r1, #0
 8000f30:	a805      	add	r0, sp, #20
 8000f32:	f000 f9ad 	bl	8001290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f36:	2214      	movs	r2, #20
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4668      	mov	r0, sp
 8000f3c:	f000 f9a8 	bl	8001290 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	4910      	ldr	r1, [pc, #64]	; (8000f84 <SystemClock_Config+0x5c>)
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <SystemClock_Config+0x60>)
 8000f44:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f46:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	401a      	ands	r2, r3
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f52:	2310      	movs	r3, #16
 8000f54:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f56:	3b0f      	subs	r3, #15
 8000f58:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f5a:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f62:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f64:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f66:	f7ff fbe7 	bl	8000738 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6c:	0021      	movs	r1, r4
 8000f6e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f70:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f72:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f74:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f76:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f78:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f7a:	f7ff fe2f 	bl	8000bdc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f7e:	b012      	add	sp, #72	; 0x48
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	40007000 	.word	0x40007000
 8000f88:	ffffe7ff 	.word	0xffffe7ff

08000f8c <main>:
{
 8000f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_Init();
 8000f8e:	f7ff f95f 	bl	8000250 <HAL_Init>
  SystemClock_Config();
 8000f92:	f7ff ffc9 	bl	8000f28 <SystemClock_Config>
  MX_GPIO_Init();
 8000f96:	f7ff ff43 	bl	8000e20 <MX_GPIO_Init>
  MX_ADC_Init();
 8000f9a:	f7ff fed7 	bl	8000d4c <MX_ADC_Init>
  volatile uint32_t DummyVar = 0;
 8000f9e:	2300      	movs	r3, #0
	  ON_RLED1();
 8000fa0:	25a0      	movs	r5, #160	; 0xa0
	  ON_RLED2();
 8000fa2:	2680      	movs	r6, #128	; 0x80
	  ON_RLED4();
 8000fa4:	2780      	movs	r7, #128	; 0x80
	  ON_RLED1();
 8000fa6:	2401      	movs	r4, #1
  volatile uint32_t DummyVar = 0;
 8000fa8:	9300      	str	r3, [sp, #0]
  volatile uint32_t FullCount = 200000;
 8000faa:	4b64      	ldr	r3, [pc, #400]	; (800113c <main+0x1b0>)
	  ON_RLED1();
 8000fac:	05ed      	lsls	r5, r5, #23
  volatile uint32_t FullCount = 200000;
 8000fae:	9301      	str	r3, [sp, #4]
	  ON_RLED2();
 8000fb0:	0236      	lsls	r6, r6, #8
	  ON_RLED4();
 8000fb2:	017f      	lsls	r7, r7, #5
	  ON_RLED1();
 8000fb4:	0022      	movs	r2, r4
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	0028      	movs	r0, r5
 8000fba:	f7ff fb7b 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED2();
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	0031      	movs	r1, r6
 8000fc2:	485f      	ldr	r0, [pc, #380]	; (8001140 <main+0x1b4>)
 8000fc4:	f7ff fb76 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED3();
 8000fc8:	2180      	movs	r1, #128	; 0x80
 8000fca:	0022      	movs	r2, r4
 8000fcc:	0189      	lsls	r1, r1, #6
 8000fce:	485c      	ldr	r0, [pc, #368]	; (8001140 <main+0x1b4>)
 8000fd0:	f7ff fb70 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED4();
 8000fd4:	0022      	movs	r2, r4
 8000fd6:	0039      	movs	r1, r7
 8000fd8:	0028      	movs	r0, r5
 8000fda:	f7ff fb6b 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED5();
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0022      	movs	r2, r4
 8000fe2:	0109      	lsls	r1, r1, #4
 8000fe4:	0028      	movs	r0, r5
 8000fe6:	f7ff fb65 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED6();
 8000fea:	0022      	movs	r2, r4
 8000fec:	0031      	movs	r1, r6
 8000fee:	4855      	ldr	r0, [pc, #340]	; (8001144 <main+0x1b8>)
 8000ff0:	f7ff fb60 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED7();
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	0189      	lsls	r1, r1, #6
 8000ffa:	4852      	ldr	r0, [pc, #328]	; (8001144 <main+0x1b8>)
 8000ffc:	f7ff fb5a 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED8();
 8001000:	0022      	movs	r2, r4
 8001002:	0039      	movs	r1, r7
 8001004:	484f      	ldr	r0, [pc, #316]	; (8001144 <main+0x1b8>)
 8001006:	f7ff fb55 	bl	80006b4 <HAL_GPIO_WritePin>
  for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 800100a:	2300      	movs	r3, #0
 800100c:	9a01      	ldr	r2, [sp, #4]
 800100e:	4293      	cmp	r3, r2
 8001010:	d200      	bcs.n	8001014 <main+0x88>
 8001012:	e088      	b.n	8001126 <main+0x19a>
	  OFF_RLED1();
 8001014:	2200      	movs	r2, #0
 8001016:	2102      	movs	r1, #2
 8001018:	0028      	movs	r0, r5
 800101a:	f7ff fb4b 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED2();
 800101e:	2200      	movs	r2, #0
 8001020:	0031      	movs	r1, r6
 8001022:	4847      	ldr	r0, [pc, #284]	; (8001140 <main+0x1b4>)
 8001024:	f7ff fb46 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED3();
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	2200      	movs	r2, #0
 800102c:	0189      	lsls	r1, r1, #6
 800102e:	4844      	ldr	r0, [pc, #272]	; (8001140 <main+0x1b4>)
 8001030:	f7ff fb40 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED4();
 8001034:	2200      	movs	r2, #0
 8001036:	0039      	movs	r1, r7
 8001038:	0028      	movs	r0, r5
 800103a:	f7ff fb3b 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED5();
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	2200      	movs	r2, #0
 8001042:	0109      	lsls	r1, r1, #4
 8001044:	0028      	movs	r0, r5
 8001046:	f7ff fb35 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED6();
 800104a:	2200      	movs	r2, #0
 800104c:	0031      	movs	r1, r6
 800104e:	483d      	ldr	r0, [pc, #244]	; (8001144 <main+0x1b8>)
 8001050:	f7ff fb30 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED7();
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	2200      	movs	r2, #0
 8001058:	0189      	lsls	r1, r1, #6
 800105a:	483a      	ldr	r0, [pc, #232]	; (8001144 <main+0x1b8>)
 800105c:	f7ff fb2a 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_RLED8();
 8001060:	2200      	movs	r2, #0
 8001062:	0039      	movs	r1, r7
 8001064:	4837      	ldr	r0, [pc, #220]	; (8001144 <main+0x1b8>)
 8001066:	f7ff fb25 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED1();
 800106a:	0022      	movs	r2, r4
 800106c:	0021      	movs	r1, r4
 800106e:	0028      	movs	r0, r5
 8001070:	f7ff fb20 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED2();
 8001074:	0022      	movs	r2, r4
 8001076:	0031      	movs	r1, r6
 8001078:	4831      	ldr	r0, [pc, #196]	; (8001140 <main+0x1b4>)
 800107a:	f7ff fb1b 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED3();
 800107e:	0022      	movs	r2, r4
 8001080:	0021      	movs	r1, r4
 8001082:	482f      	ldr	r0, [pc, #188]	; (8001140 <main+0x1b4>)
 8001084:	f7ff fb16 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED4();
 8001088:	0022      	movs	r2, r4
 800108a:	0031      	movs	r1, r6
 800108c:	0028      	movs	r0, r5
 800108e:	f7ff fb11 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED5();
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	0022      	movs	r2, r4
 8001096:	0089      	lsls	r1, r1, #2
 8001098:	0028      	movs	r0, r5
 800109a:	f7ff fb0b 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED6();
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	0022      	movs	r2, r4
 80010a2:	0049      	lsls	r1, r1, #1
 80010a4:	0028      	movs	r0, r5
 80010a6:	f7ff fb05 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED7();
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	0022      	movs	r2, r4
 80010ae:	01c9      	lsls	r1, r1, #7
 80010b0:	4824      	ldr	r0, [pc, #144]	; (8001144 <main+0x1b8>)
 80010b2:	f7ff faff 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_GLED8();
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0022      	movs	r2, r4
 80010ba:	00c9      	lsls	r1, r1, #3
 80010bc:	4821      	ldr	r0, [pc, #132]	; (8001144 <main+0x1b8>)
 80010be:	f7ff faf9 	bl	80006b4 <HAL_GPIO_WritePin>
	  for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	9a01      	ldr	r2, [sp, #4]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d332      	bcc.n	8001130 <main+0x1a4>
	  OFF_GLED1();
 80010ca:	0021      	movs	r1, r4
 80010cc:	0028      	movs	r0, r5
 80010ce:	2200      	movs	r2, #0
 80010d0:	f7ff faf0 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED2();
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	2200      	movs	r2, #0
 80010d8:	01c9      	lsls	r1, r1, #7
 80010da:	4819      	ldr	r0, [pc, #100]	; (8001140 <main+0x1b4>)
 80010dc:	f7ff faea 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED3();
 80010e0:	0021      	movs	r1, r4
 80010e2:	2200      	movs	r2, #0
 80010e4:	4816      	ldr	r0, [pc, #88]	; (8001140 <main+0x1b4>)
 80010e6:	f7ff fae5 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED4();
 80010ea:	0031      	movs	r1, r6
 80010ec:	0028      	movs	r0, r5
 80010ee:	2200      	movs	r2, #0
 80010f0:	f7ff fae0 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED5();
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	0028      	movs	r0, r5
 80010f8:	2200      	movs	r2, #0
 80010fa:	0089      	lsls	r1, r1, #2
 80010fc:	f7ff fada 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED6();
 8001100:	2180      	movs	r1, #128	; 0x80
 8001102:	0028      	movs	r0, r5
 8001104:	2200      	movs	r2, #0
 8001106:	0049      	lsls	r1, r1, #1
 8001108:	f7ff fad4 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED7();
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	2200      	movs	r2, #0
 8001110:	01c9      	lsls	r1, r1, #7
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <main+0x1b8>)
 8001114:	f7ff face 	bl	80006b4 <HAL_GPIO_WritePin>
	  OFF_GLED8();
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	2200      	movs	r2, #0
 800111c:	00c9      	lsls	r1, r1, #3
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <main+0x1b8>)
 8001120:	f7ff fac8 	bl	80006b4 <HAL_GPIO_WritePin>
	  ON_RLED1();
 8001124:	e746      	b.n	8000fb4 <main+0x28>
			  DummyVar++;
 8001126:	9a00      	ldr	r2, [sp, #0]
  for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 8001128:	3301      	adds	r3, #1
			  DummyVar++;
 800112a:	3201      	adds	r2, #1
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	e76d      	b.n	800100c <main+0x80>
				  DummyVar++;
 8001130:	9a00      	ldr	r2, [sp, #0]
	  for(uint32_t DelayCounter = 0; DelayCounter < FullCount; DelayCounter++)
 8001132:	3301      	adds	r3, #1
				  DummyVar++;
 8001134:	3201      	adds	r2, #1
 8001136:	9200      	str	r2, [sp, #0]
 8001138:	e7c4      	b.n	80010c4 <main+0x138>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	00030d40 	.word	0x00030d40
 8001140:	50000800 	.word	0x50000800
 8001144:	50000400 	.word	0x50000400

08001148 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001148:	4770      	bx	lr
	...

0800114c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	2201      	movs	r2, #1
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_MspInit+0x18>)
 8001150:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001152:	430a      	orrs	r2, r1
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800115a:	0552      	lsls	r2, r2, #21
 800115c:	430a      	orrs	r2, r1
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001160:	4770      	bx	lr
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	40021000 	.word	0x40021000

08001168 <NMI_Handler>:
 8001168:	4770      	bx	lr

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	e7fe      	b.n	800116a <HardFault_Handler>

0800116c <SVC_Handler>:
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f7ff f881 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bd10      	pop	{r4, pc}

08001178 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <SystemInit+0x44>)
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	490e      	ldr	r1, [pc, #56]	; (80011c0 <SystemInit+0x48>)
 8001188:	400a      	ands	r2, r1
 800118a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <SystemInit+0x4c>)
 8001190:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001192:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001194:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	438a      	bics	r2, r1
 800119a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	490a      	ldr	r1, [pc, #40]	; (80011c8 <SystemInit+0x50>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4909      	ldr	r1, [pc, #36]	; (80011cc <SystemInit+0x54>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <SystemInit+0x58>)
 80011b4:	0512      	lsls	r2, r2, #20
 80011b6:	609a      	str	r2, [r3, #8]
#endif
}
 80011b8:	4770      	bx	lr
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40021000 	.word	0x40021000
 80011c0:	88ff400c 	.word	0x88ff400c
 80011c4:	fef6fff6 	.word	0xfef6fff6
 80011c8:	fffbffff 	.word	0xfffbffff
 80011cc:	ff02ffff 	.word	0xff02ffff
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011d6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80011d8:	2004      	movs	r0, #4
    LDR R1, [R0]
 80011da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80011dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80011de:	221f      	movs	r2, #31
    CMP R1, R2
 80011e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80011e2:	d105      	bne.n	80011f0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <LoopForever+0x6>)
    LDR R1,=0x00000001
 80011e6:	2101      	movs	r1, #1
    STR R1, [R0]
 80011e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80011ea:	4810      	ldr	r0, [pc, #64]	; (800122c <LoopForever+0xa>)
    LDR R1,=0x00000000
 80011ec:	2100      	movs	r1, #0
    STR R1, [R0]
 80011ee:	6001      	str	r1, [r0, #0]

080011f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80011f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011f2:	e003      	b.n	80011fc <LoopCopyDataInit>

080011f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <LoopForever+0xe>)
  ldr  r3, [r3, r1]
 80011f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011fa:	3104      	adds	r1, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopForever+0x12>)
  ldr  r3, =_edata
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <LoopForever+0x16>)
  adds  r2, r0, r1
 8001200:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001202:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001204:	d3f6      	bcc.n	80011f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopForever+0x1a>)
  b  LoopFillZerobss
 8001208:	e002      	b.n	8001210 <LoopFillZerobss>

0800120a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800120a:	2300      	movs	r3, #0
  str  r3, [r2]
 800120c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120e:	3204      	adds	r2, #4

08001210 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <LoopForever+0x1e>)
  cmp  r2, r3
 8001212:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001214:	d3f9      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001216:	f7ff ffaf 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121a:	f000 f815 	bl	8001248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff feb5 	bl	8000f8c <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
   ldr   r0, =_estack
 8001224:	20002000 	.word	0x20002000
    LDR R0,=0x40021034
 8001228:	40021034 	.word	0x40021034
    LDR R0,=0x40010000
 800122c:	40010000 	.word	0x40010000
  ldr  r3, =_sidata
 8001230:	080012dc 	.word	0x080012dc
  ldr  r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001238:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800123c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001240:	20000080 	.word	0x20000080

08001244 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_IRQHandler>
	...

08001248 <__libc_init_array>:
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	2600      	movs	r6, #0
 800124c:	4d0c      	ldr	r5, [pc, #48]	; (8001280 <__libc_init_array+0x38>)
 800124e:	4c0d      	ldr	r4, [pc, #52]	; (8001284 <__libc_init_array+0x3c>)
 8001250:	1b64      	subs	r4, r4, r5
 8001252:	10a4      	asrs	r4, r4, #2
 8001254:	42a6      	cmp	r6, r4
 8001256:	d109      	bne.n	800126c <__libc_init_array+0x24>
 8001258:	2600      	movs	r6, #0
 800125a:	f000 f821 	bl	80012a0 <_init>
 800125e:	4d0a      	ldr	r5, [pc, #40]	; (8001288 <__libc_init_array+0x40>)
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <__libc_init_array+0x44>)
 8001262:	1b64      	subs	r4, r4, r5
 8001264:	10a4      	asrs	r4, r4, #2
 8001266:	42a6      	cmp	r6, r4
 8001268:	d105      	bne.n	8001276 <__libc_init_array+0x2e>
 800126a:	bd70      	pop	{r4, r5, r6, pc}
 800126c:	00b3      	lsls	r3, r6, #2
 800126e:	58eb      	ldr	r3, [r5, r3]
 8001270:	4798      	blx	r3
 8001272:	3601      	adds	r6, #1
 8001274:	e7ee      	b.n	8001254 <__libc_init_array+0xc>
 8001276:	00b3      	lsls	r3, r6, #2
 8001278:	58eb      	ldr	r3, [r5, r3]
 800127a:	4798      	blx	r3
 800127c:	3601      	adds	r6, #1
 800127e:	e7f2      	b.n	8001266 <__libc_init_array+0x1e>
 8001280:	080012d4 	.word	0x080012d4
 8001284:	080012d4 	.word	0x080012d4
 8001288:	080012d4 	.word	0x080012d4
 800128c:	080012d8 	.word	0x080012d8

08001290 <memset>:
 8001290:	0003      	movs	r3, r0
 8001292:	1882      	adds	r2, r0, r2
 8001294:	4293      	cmp	r3, r2
 8001296:	d100      	bne.n	800129a <memset+0xa>
 8001298:	4770      	bx	lr
 800129a:	7019      	strb	r1, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	e7f9      	b.n	8001294 <memset+0x4>

080012a0 <_init>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr

080012ac <_fini>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b2:	bc08      	pop	{r3}
 80012b4:	469e      	mov	lr, r3
 80012b6:	4770      	bx	lr
