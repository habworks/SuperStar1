#include "LED_Control.h"
#include "stm32l0xx_hal.h"
#include "stm32l0xx_hal_gpio.h"
#include "stm32l0xx_hal_rcc.h"
#include "MainSupport.h"


void init_OSC32_InOutAsGPIO()
{
	GPIO_InitTypeDef GPIO_InitStructure = {0};
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};


	//RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
	// GPIO Function lost in STANDBY, PC14,PC15 revert to analog inputs
	GPIO_InitStructure.Pin = GPIO_PIN_14 | GPIO_PIN_15; //MC_GLED2_Pin|MC_RLED2_Pin
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);

	SET_BIT(RCC->CR, RCC_CR_HSEON);
	CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);
/*
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_OFF;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
	{
		Error_Handler();
	}

	CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
	CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
	*/

	//PWR_RTCAccessCmd(ENABLE); // Enable access to LSE
	//RCC_LSEConfig(RCC_LSE_OFF); // PC14 PC15 as GPIO
}


bool_t displayNumONE(uint8_t DigitToDisplayONE)
{
	if (DigitToDisplayONE >= 10)
	{
		OFF_DIG_ONE_A();
		OFF_DIG_ONE_B();
		OFF_DIG_ONE_C();
		OFF_DIG_ONE_D();
		OFF_DIG_ONE_E();
		OFF_DIG_ONE_F();
		OFF_DIG_ONE_G();
		return (false);
	}

	OFF_DIG_ONE_A();
	OFF_DIG_ONE_B();
	OFF_DIG_ONE_C();
	OFF_DIG_ONE_D();
	OFF_DIG_ONE_E();
	OFF_DIG_ONE_F();
	OFF_DIG_ONE_G();

	switch (DigitToDisplayONE)
	{
		case 0:
			DIG_ONE_A();
			DIG_ONE_B();
			DIG_ONE_C();
			DIG_ONE_D();
			DIG_ONE_E();
			DIG_ONE_F();
			break;
		case 1:
			DIG_ONE_B();
			DIG_ONE_C();
			break;
		case 2:
			DIG_ONE_A();
			DIG_ONE_B();
			DIG_ONE_G();
			DIG_ONE_E();
			DIG_ONE_D();
			break;
		case 3:
			DIG_ONE_A();
			DIG_ONE_B();
			DIG_ONE_G();
			DIG_ONE_C();
			DIG_ONE_D();
			break;
		case 4:
			DIG_ONE_F();
			DIG_ONE_G();
			DIG_ONE_B();
			DIG_ONE_C();
			break;
		case 5:
			DIG_ONE_A();
			DIG_ONE_F();
			DIG_ONE_G();
			DIG_ONE_C();
			DIG_ONE_D();
			break;
		case 6:
			DIG_ONE_A();
			DIG_ONE_F();
			DIG_ONE_G();
			DIG_ONE_C();
			DIG_ONE_D();
			DIG_ONE_E();
			break;
		case 7:
			DIG_ONE_A();
			DIG_ONE_B();
			DIG_ONE_C();
			break;
		case 8:
			DIG_ONE_A();
			DIG_ONE_B();
			DIG_ONE_C();
			DIG_ONE_D();
			DIG_ONE_E();
			DIG_ONE_F();
			DIG_ONE_G();
			break;
		case 9:
			DIG_ONE_A();
			DIG_ONE_B();
			DIG_ONE_F();
			DIG_ONE_G();
			DIG_ONE_C();
			break;
		default:
			OFF_DIG_ONE_A();
			OFF_DIG_ONE_B();
			OFF_DIG_ONE_C();
			OFF_DIG_ONE_D();
			OFF_DIG_ONE_E();
			OFF_DIG_ONE_F();
			OFF_DIG_ONE_G();
			break;
	}

	return (true);
}
//TENTH//

bool_t displayNumTENTH(uint8_t DigitToDisplayTENTH)
{
	if (DigitToDisplayTENTH >= 10)
					{
						OFF_DIG_TENTH_A();
						OFF_DIG_TENTH_B();
						OFF_DIG_TENTH_C();
						OFF_DIG_TENTH_D();
						OFF_DIG_TENTH_E();
						OFF_DIG_TENTH_F();
						OFF_DIG_TENTH_G();
						return (false);
					}

	OFF_DIG_TENTH_A();
	OFF_DIG_TENTH_B();
	OFF_DIG_TENTH_C();
	OFF_DIG_TENTH_C();
	OFF_DIG_TENTH_D();
	OFF_DIG_TENTH_E();
	OFF_DIG_TENTH_F();
	OFF_DIG_TENTH_G();

				switch (DigitToDisplayTENTH)
				{
					case 0:
						DIG_TENTH_A();
						DIG_TENTH_B();
						DIG_TENTH_C();
						DIG_TENTH_D();
						DIG_TENTH_E();
						DIG_TENTH_F();
						break;
					case 1:
						DIG_TENTH_B();
						DIG_TENTH_C();
						break;
					case 2:
						DIG_TENTH_A();
						DIG_TENTH_B();
						DIG_TENTH_G();
						DIG_TENTH_E();
						DIG_TENTH_D();
						break;
					case 3:
						DIG_TENTH_A();
						DIG_TENTH_B();
						DIG_TENTH_G();
						DIG_TENTH_C();
						DIG_TENTH_D();
						break;
					case 4:
						DIG_TENTH_F();
						DIG_TENTH_G();
						DIG_TENTH_B();
						DIG_TENTH_C();
						break;
					case 5:
						DIG_TENTH_A();
						DIG_TENTH_F();
						DIG_TENTH_G();
						DIG_TENTH_C();
						DIG_TENTH_D();
						break;
					case 6:
						DIG_TENTH_A();
						DIG_TENTH_F();
						DIG_TENTH_G();
						DIG_TENTH_C();
						DIG_TENTH_D();
						DIG_TENTH_E();
						break;
					case 7:
						DIG_TENTH_A();
						DIG_TENTH_B();
						DIG_TENTH_C();
						break;
					case 8:
						DIG_TENTH_A();
						DIG_TENTH_B();
						DIG_TENTH_C();
						DIG_TENTH_D();
						DIG_TENTH_E();
						DIG_TENTH_F();
						DIG_TENTH_G();
						break;
					case 9:
						DIG_TENTH_A();
						DIG_TENTH_B();
						DIG_TENTH_F();
						DIG_TENTH_G();
						DIG_TENTH_C();
						break;
					default:
						OFF_DIG_TENTH_A();
						OFF_DIG_TENTH_B();
						OFF_DIG_TENTH_C();
						OFF_DIG_TENTH_C();
						OFF_DIG_TENTH_D();
						OFF_DIG_TENTH_E();
						OFF_DIG_TENTH_F();
						OFF_DIG_TENTH_G();
						break;
				}

return (true);

}
